!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
ACCESS_CONTROL_ALLOW_CREDENTIALS_TRUE	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/access_control_allow_credentials.rs	/^const ACCESS_CONTROL_ALLOW_CREDENTIALS_TRUE: UniCase<&'static str> = UniCase("true");$/;"	c
AccessControlAllowCredentials	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/access_control_allow_credentials.rs	/^pub struct AccessControlAllowCredentials;$/;"	s
AccessControlAllowOrigin	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/access_control_allow_origin.rs	/^pub enum AccessControlAllowOrigin {$/;"	g
Authorization	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/authorization.rs	/^pub struct Authorization<S: Scheme>(pub S);$/;"	s
Basic	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/authorization.rs	/^pub struct Basic {$/;"	s
Bearer	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/authorization.rs	/^pub struct Bearer {$/;"	s
Body	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/mod.rs	/^pub enum Body<'a> {$/;"	g
Body	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/server/response.rs	/^enum Body {$/;"	g
Body	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/context/body.rs	/^    type Body = Self;$/;"	T
BodyReader	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/context/body.rs	/^pub struct BodyReader<'a, 'b: 'a> {$/;"	s
Branch	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/tree_router.rs	/^enum Branch {$/;"	g
BufReader	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/buffer.rs	/^pub struct BufReader<R> {$/;"	s
Buffer	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/context/maybe_utf8.rs	/^pub struct Buffer<'a> {$/;"	s
ByteRangeSpec	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/range.rs	/^pub enum ByteRangeSpec {$/;"	g
BytesExt	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/utils.rs	/^pub trait BytesExt {$/;"	t
CLOSE	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/connection.rs	/^const CLOSE: UniCase<&'static str> = UniCase("close");$/;"	c
CR	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h1.rs	/^pub const CR: u8 = b'\\r';$/;"	c
CacheControl	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/cache_control.rs	/^pub struct CacheControl(pub Vec<CacheDirective>);$/;"	s
CacheDirective	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/cache_control.rs	/^pub enum CacheDirective {$/;"	g
Charset	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/shared/charset.rs	/^pub enum Charset{$/;"	g
Chunked	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/response.rs	/^pub struct Chunked<'a, 'b> {$/;"	s
Client	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/mod.rs	/^pub struct Client {$/;"	s
ClientWrapper	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^    pub struct ClientWrapper(ClientBuilder);$/;"	s
CloneableMockStream	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/mock.rs	/^pub struct CloneableMockStream {$/;"	s
CloneableStream	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h2.rs	/^pub trait CloneableStream: NetworkStream + Clone {}$/;"	t
Config	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/pool.rs	/^pub struct Config {$/;"	s
ConnAdapter	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h1.rs	/^struct ConnAdapter<C: NetworkConnector + Send + Sync>(C);$/;"	s
ConnectionOption	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/connection.rs	/^pub enum ConnectionOption {$/;"	g
Connector	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h1.rs	/^struct Connector(Box<NetworkConnector<Stream=Box<NetworkStream + Send>> + Send + Sync>);$/;"	s
ContentDisposition	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/content_disposition.rs	/^pub struct ContentDisposition {$/;"	s
ContentLength	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/content_length.rs	/^pub struct ContentLength(pub u64);$/;"	s
ContentRangeSpec	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/content_range.rs	/^pub enum ContentRangeSpec {$/;"	g
Context	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/context/mod.rs	/^pub struct Context<'a, 'b: 'a, 's> {$/;"	s
ContextAction	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/filter.rs	/^pub enum ContextAction {$/;"	g
ContextFilter	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/filter.rs	/^pub trait ContextFilter: Send + Sync {$/;"	t
Cookie	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/cookie.rs	/^pub struct Cookie(pub Vec<CookiePair>);$/;"	s
CowStr	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/mod.rs	/^struct CowStr(Cow<'static, str>);$/;"	s
CrazyLength	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/mod.rs	/^    struct CrazyLength(Option<bool>, usize);$/;"	s
Data	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/response.rs	/^pub enum Data<'a> {$/;"	g
DefaultConnector	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^pub type DefaultConnector = HttpConnector;$/;"	T
DefaultConnector	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^pub type DefaultConnector = HttpsConnector<self::openssl::OpensslClient>;$/;"	T
DefaultConnector	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^pub type DefaultConnector = HttpsConnector<self::security_framework::ClientWrapper>;$/;"	T
Directive	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/strict_transport_security.rs	/^enum Directive {$/;"	g
DispositionParam	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/content_disposition.rs	/^pub enum DispositionParam {$/;"	g
DispositionType	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/content_disposition.rs	/^pub enum DispositionType {$/;"	g
EXPECT_CONTINUE	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/expect.rs	/^const EXPECT_CONTINUE: UniCase<&'static str> = UniCase("100-continue");$/;"	c
Encoding	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/shared/encoding.rs	/^pub enum Encoding {$/;"	g
EndError	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h1.rs	/^pub struct EndError<W: Write>(io::Error, HttpWriter<W>);$/;"	s
Endpoint	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/mod.rs	/^pub struct Endpoint<'a, T: 'a> {$/;"	s
EntityTag	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/shared/entity.rs	/^pub struct EntityTag {$/;"	s
Err	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/accept_ranges.rs	/^    type Err = ::Error;$/;"	T
Err	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/authorization.rs	/^	type Err = ::Error;$/;"	T
Err	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/authorization.rs	/^    type Err = ::Error;$/;"	T
Err	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/cache_control.rs	/^    type Err = Option<<u32 as FromStr>::Err>;$/;"	T
Err	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/connection.rs	/^    type Err = ();$/;"	T
Err	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/content_range.rs	/^    type Err = ::Error;$/;"	T
Err	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/host.rs	/^    type Err = ::Error;$/;"	T
Err	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/origin.rs	/^    type Err = ::Error;$/;"	T
Err	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/prefer.rs	/^    type Err = Option<<u32 as FromStr>::Err>;$/;"	T
Err	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/range.rs	/^    type Err = ::Error;$/;"	T
Err	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/strict_transport_security.rs	/^    type Err = ::Error;$/;"	T
Err	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/upgrade.rs	/^    type Err = ();$/;"	T
Err	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/upgrade.rs	/^    type Err =();$/;"	T
Err	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/shared/charset.rs	/^    type Err = ::Error;$/;"	T
Err	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/shared/encoding.rs	/^    type Err = ::Error;$/;"	T
Err	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/shared/entity.rs	/^    type Err = ::Error;$/;"	T
Err	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/shared/httpdate.rs	/^    type Err = ::Error;$/;"	T
Err	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/shared/quality_item.rs	/^    type Err = ::Error;$/;"	T
Err	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h2.rs	/^    type Err = Http2ConnectError;$/;"	T
Err	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/method.rs	/^    type Err = Error;$/;"	T
Err	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/uri.rs	/^    type Err = Error;$/;"	T
Err	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/log-0.3.6/src/lib.rs	/^    type Err = ();$/;"	T
Err	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/server/config.rs	/^    type Err = <SocketAddr as FromStr>::Err;$/;"	T
Error	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/error.rs	/^pub enum Error {$/;"	g
Error	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/response.rs	/^pub enum Error {$/;"	g
Expect	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/expect.rs	/^pub enum Expect {$/;"	g
ExtendedValue	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/parsing.rs	/^pub struct ExtendedValue {$/;"	s
FileError	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/response.rs	/^pub enum FileError<'a, 'b> {$/;"	g
FilterContext	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/filter.rs	/^pub struct FilterContext<'a> {$/;"	s
Foo	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/benches/client.rs	/^struct Foo;$/;"	s
Fresh	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^pub enum Fresh {}$/;"	g
Global	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/server/config.rs	/^pub struct Global(GlobalState);$/;"	s
GlobalState	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/server/config.rs	/^enum GlobalState {$/;"	g
Handler	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/server/mod.rs	/^pub trait Handler: Sync + Send {$/;"	t
Handler	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/handler.rs	/^pub trait Handler: Send + Sync + 'static {$/;"	t
Handler	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/method_router.rs	/^    type Handler = T::Handler;$/;"	T
Handler	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/mod.rs	/^    type Handler = H;$/;"	T
Handler	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/mod.rs	/^    type Handler = T::Handler;$/;"	T
Handler	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/mod.rs	/^    type Handler: Handler;$/;"	T
Handler	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/or_else.rs	/^    type Handler = Inner::Handler;$/;"	T
Handler	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/tree_router.rs	/^    type Handler = T::Handler;$/;"	T
Handler	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/variables.rs	/^    type Handler = H;$/;"	T
Header	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/mod.rs	/^pub trait Header: Clone + Any + Send + Sync {$/;"	t
HeaderClone	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/mod.rs	/^pub trait HeaderClone {$/;"	t
HeaderFormat	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/mod.rs	/^pub trait HeaderFormat: fmt::Debug + HeaderClone + Any + Typeable + Send + Sync {$/;"	t
HeaderFormatter	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/mod.rs	/^pub struct HeaderFormatter<'a, H: HeaderFormat>(pub &'a H);$/;"	s
HeaderName	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/mod.rs	/^type HeaderName = UniCase<CowStr>;$/;"	T
HeaderView	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/mod.rs	/^pub struct HeaderView<'a>(&'a HeaderName, &'a Item);$/;"	s
Headers	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/mod.rs	/^pub struct Headers {$/;"	s
HeadersItems	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/mod.rs	/^pub struct HeadersItems<'a> {$/;"	s
HeadersVisitor	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/mod.rs	/^        struct HeadersVisitor;$/;"	s
Host	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/host.rs	/^pub struct Host {$/;"	s
Host	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/server/config.rs	/^pub struct Host(SocketAddr);$/;"	s
Http11Message	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h1.rs	/^pub struct Http11Message {$/;"	s
Http11Protocol	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h1.rs	/^pub struct Http11Protocol {$/;"	s
Http2ConnectError	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h2.rs	/^struct Http2ConnectError(io::Error);$/;"	s
Http2Connector	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h2.rs	/^struct Http2Connector<S> where S: CloneableStream {$/;"	s
Http2Message	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h2.rs	/^pub struct Http2Message<S> where S: CloneableStream {$/;"	s
Http2Protocol	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h2.rs	/^pub struct Http2Protocol<C, S> where C: NetworkConnector<Stream=S> + Send + 'static,$/;"	s
Http2Request	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h2.rs	/^struct Http2Request {$/;"	s
Http2Response	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h2.rs	/^struct Http2Response {$/;"	s
Http2Stream	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h2.rs	/^struct Http2Stream<S: CloneableStream>(S);$/;"	s
HttpConnector	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^pub struct HttpConnector;$/;"	s
HttpDate	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/shared/httpdate.rs	/^pub struct HttpDate(pub time::Tm);$/;"	s
HttpListener	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^pub struct HttpListener(TcpListener);$/;"	s
HttpMessage	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/message.rs	/^pub trait HttpMessage: Write + Read + Send + Any + Typeable + Debug {$/;"	t
HttpReader	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h1.rs	/^pub enum HttpReader<R> {$/;"	g
HttpStream	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^pub struct HttpStream(pub TcpStream);$/;"	s
HttpVersion	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/version.rs	/^pub enum HttpVersion {$/;"	g
HttpWriter	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h1.rs	/^pub enum HttpWriter<W: Write> {$/;"	g
HttpsConnector	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^pub struct HttpsConnector<S: SslClient, C: NetworkConnector = HttpConnector> {$/;"	s
HttpsListener	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^pub struct HttpsListener<S: SslServer> {$/;"	s
HttpsStream	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^pub enum HttpsStream<S: NetworkStream> {$/;"	g
HyperServer	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/server/instance.rs	/^enum HyperServer {$/;"	g
INITIALIZED	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/log-0.3.6/src/lib.rs	/^const INITIALIZED: usize = 2;$/;"	c
INITIALIZING	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/log-0.3.6/src/lib.rs	/^const INITIALIZING: usize = 1;$/;"	c
INIT_BUFFER_SIZE	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/buffer.rs	/^const INIT_BUFFER_SIZE: usize = 4096;$/;"	c
IS_SLASH	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/mod.rs	/^const IS_SLASH: &'static fn(&u8) -> bool = & (is_slash as fn(&u8) -> bool);$/;"	c
IfRange	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/if_range.rs	/^pub enum IfRange {$/;"	g
Incoming	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h1.rs	/^pub struct Incoming<S> {$/;"	s
InsertState	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/mod.rs	/^pub struct InsertState<'a, I: Iterator<Item=&'a [u8]>> {$/;"	s
IntoIter	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/context/parameters.rs	/^    type IntoIter = <&'a HashMap<MaybeUtf8Owned, MaybeUtf8Owned> as IntoIterator>::IntoIter;$/;"	T
IntoIter	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/context/parameters.rs	/^    type IntoIter = <&'a mut HashMap<MaybeUtf8Owned, MaybeUtf8Owned> as IntoIterator>::IntoIter;$/;"	T
IntoIter	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/context/parameters.rs	/^    type IntoIter = <HashMap<MaybeUtf8Owned, MaybeUtf8Owned> as IntoIterator>::IntoIter;$/;"	T
IntoUrl	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/mod.rs	/^pub trait IntoUrl {$/;"	t
Item	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/internals/item.rs	/^pub struct Item {$/;"	s
Item	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/mod.rs	/^    type Item = HeaderView<'a>;$/;"	T
Item	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^    type Item = ::Result<N::Stream>;$/;"	T
Item	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/context/parameters.rs	/^    type Item = (&'a MaybeUtf8Owned, &'a MaybeUtf8Owned);$/;"	T
Item	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/context/parameters.rs	/^    type Item = (&'a MaybeUtf8Owned, &'a mut MaybeUtf8Owned);$/;"	T
Item	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/context/parameters.rs	/^    type Item = (MaybeUtf8Owned, MaybeUtf8Owned);$/;"	T
Item	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/mod.rs	/^    type Item = &'a [u8];$/;"	T
Item	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/mod.rs	/^    type Item = <I as Iterator>::Item;$/;"	T
Item	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/mod.rs	/^    type Item=(MaybeUtf8Owned, MaybeUtf8Owned);$/;"	T
KEEP_ALIVE	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/connection.rs	/^const KEEP_ALIVE: UniCase<&'static str> = UniCase("keep-alive");$/;"	c
KeepAlive	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/server/config.rs	/^pub struct KeepAlive {$/;"	s
Key	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/pool.rs	/^type Key = (String, u16, Scheme);$/;"	T
LF	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h1.rs	/^pub const LF: u8 = b'\\n';$/;"	c
LINE_ENDING	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h1.rs	/^pub const LINE_ENDING: &'static str = "\\r\\n";$/;"	c
LOG_LEVEL_NAMES	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/log-0.3.6/src/lib.rs	/^static LOG_LEVEL_NAMES: [&'static str; 6] = ["OFF", "ERROR", "WARN", "INFO",$/;"	c
Link	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/context/hypermedia.rs	/^pub struct Link<'a> {$/;"	s
LinkSegment	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/context/hypermedia.rs	/^pub struct LinkSegment<'a> {$/;"	s
LinkType	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/tree_router.rs	/^    enum LinkType<'a> {$/;"	g
ListenerPool	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/server/listener.rs	/^pub struct ListenerPool<A: NetworkListener> {$/;"	s
Listening	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/server/mod.rs	/^pub struct Listening {$/;"	s
Log	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/log-0.3.6/src/lib.rs	/^pub trait Log: Sync+Send {$/;"	t
LogLevel	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/log-0.3.6/src/lib.rs	/^pub enum LogLevel {$/;"	g
LogLevelFilter	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/log-0.3.6/src/lib.rs	/^pub enum LogLevelFilter {$/;"	g
LogLocation	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/log-0.3.6/src/lib.rs	/^pub struct LogLocation {$/;"	s
LogMetadata	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/log-0.3.6/src/lib.rs	/^pub struct LogMetadata<'a> {$/;"	s
LogRecord	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/log-0.3.6/src/lib.rs	/^pub struct LogRecord<'a> {$/;"	s
Logger	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/log-0.3.6/tests/filters.rs	/^struct Logger(Arc<State>);$/;"	s
LoggerGuard	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/log-0.3.6/src/lib.rs	/^struct LoggerGuard(&'static Log);$/;"	s
MAX_BUFFER_SIZE	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/buffer.rs	/^const MAX_BUFFER_SIZE: usize = 8192 + 4096 * 100;$/;"	c
MAX_HEADERS	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h1.rs	/^const MAX_HEADERS: usize = 100;$/;"	c
MAX_INVALID_RESPONSE_BYTES	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h1.rs	/^const MAX_INVALID_RESPONSE_BYTES: usize = 1024 * 128;$/;"	c
MAX_LOG_LEVEL_FILTER	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/log-0.3.6/src/lib.rs	/^static MAX_LOG_LEVEL_FILTER: AtomicUsize = ATOMIC_USIZE_INIT;$/;"	c
MaxLogLevelFilter	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/log-0.3.6/src/lib.rs	/^pub struct MaxLogLevelFilter(());$/;"	s
MaybeKnown	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/file.rs	/^enum MaybeKnown<T> {$/;"	g
MaybeUtf8	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/context/maybe_utf8.rs	/^pub enum MaybeUtf8<S, V> {$/;"	g
MaybeUtf8Owned	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/context/maybe_utf8.rs	/^pub type MaybeUtf8Owned = MaybeUtf8<String, Vec<u8>>;$/;"	T
MaybeUtf8Slice	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/context/maybe_utf8.rs	/^pub type MaybeUtf8Slice<'a> = MaybeUtf8<&'a str, &'a [u8]>;$/;"	T
MessageState	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h2.rs	/^enum MessageState {$/;"	g
MessageStream	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/mod.rs	/^        type MessageStream = PooledStream<super::proxy::Proxied<MockStream, MockStream>>;$/;"	T
Method	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/method.rs	/^pub enum Method {$/;"	g
MethodRouter	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/method_router.rs	/^pub struct MethodRouter<T> {$/;"	s
MimeHelper	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/macros.rs	/^pub enum MimeHelper<'a, T> {$/;"	g
MockConnector	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/benches/client.rs	/^struct MockConnector;$/;"	s
MockConnector	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/mock.rs	/^pub struct MockConnector;$/;"	s
MockHttp2Connector	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/mock.rs	/^pub struct MockHttp2Connector {$/;"	s
MockSsl	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/mock.rs	/^pub struct MockSsl;$/;"	s
MockStream	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/benches/client.rs	/^struct MockStream {$/;"	s
MockStream	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/mock.rs	/^pub struct MockStream {$/;"	s
MultipartRequest	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/context/body.rs	/^pub struct MultipartRequest<'r, 'a: 'r, 'b: 'a> {$/;"	s
MyServer	/home/kibbles/Projects/rust/tin_can_telephone/src/example.rs	/^pub type MyServer<R> = Server<TreeRouter<MethodRouter<Variables<R>>>>;$/;"	T
NAME	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/origin.rs	/^        static NAME: &'static str = "Origin";$/;"	c
NAME	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/referrer_policy.rs	/^        static NAME: &'static str = "Referrer-Policy";$/;"	c
NOV_07	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/shared/httpdate.rs	/^    const NOV_07: HttpDate = HttpDate(Tm {$/;"	c
NetworkConnections	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^pub struct NetworkConnections<'a, N: NetworkListener + 'a>(&'a mut N);$/;"	s
NetworkConnector	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^pub trait NetworkConnector {$/;"	t
NetworkListener	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^pub trait NetworkListener: Clone {$/;"	t
NetworkStream	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^pub trait NetworkStream: Read + Write + Any + Send + Typeable {$/;"	t
NopLogger	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/log-0.3.6/src/lib.rs	/^struct NopLogger;$/;"	s
Openssl	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^    pub struct Openssl {$/;"	s
OpensslClient	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^    pub struct OpensslClient(SslContext);$/;"	s
OptCell	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/internals/cell.rs	/^pub struct OptCell<T>(UnsafeCell<Option<T>>);$/;"	s
OrElse	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/or_else.rs	/^pub struct OrElse<R, H> {$/;"	s
Origin	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/origin.rs	/^pub struct Origin {$/;"	s
PHRASE	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/examples/hello.rs	/^static PHRASE: &'static [u8] = b"Hello World!";$/;"	c
Parameters	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/context/parameters.rs	/^pub struct Parameters(HashMap<MaybeUtf8Owned, MaybeUtf8Owned>);$/;"	s
ParsedUri	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/server/instance.rs	/^struct ParsedUri {$/;"	s
Plaintext	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/proxy.rs	/^    pub struct Plaintext;$/;"	s
Pool	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/pool.rs	/^pub struct Pool<C: NetworkConnector> {$/;"	s
PoolImpl	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/pool.rs	/^struct PoolImpl<S> {$/;"	s
PooledStream	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/pool.rs	/^pub struct PooledStream<S> {$/;"	s
PooledStreamInner	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/pool.rs	/^struct PooledStreamInner<S> {$/;"	s
Pragma	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/pragma.rs	/^pub enum Pragma {$/;"	g
Prefer	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/prefer.rs	/^pub struct Prefer(pub Vec<Preference>);$/;"	s
Preference	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/prefer.rs	/^pub enum Preference {$/;"	g
PreferenceApplied	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/preference_applied.rs	/^pub struct PreferenceApplied(pub Vec<Preference>);$/;"	s
Protocol	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/upgrade.rs	/^pub struct Protocol {$/;"	s
Protocol	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/message.rs	/^pub trait Protocol {$/;"	t
ProtocolName	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/upgrade.rs	/^pub enum ProtocolName {$/;"	g
Proxied	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/proxy.rs	/^pub enum Proxied<T1, T2> {$/;"	g
Proxy	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/proxy.rs	/^pub struct Proxy<C, S>$/;"	s
ProxyConfig	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/mod.rs	/^pub struct ProxyConfig<H, S>(pub H, pub u16, pub S)$/;"	s
PtrMap	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/internals/cell.rs	/^enum PtrMap<T> {$/;"	g
PtrMapCell	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/internals/cell.rs	/^pub struct PtrMapCell<V: ?Sized>(UnsafeCell<PtrMap<Box<V>>>);$/;"	s
Quality	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/shared/quality_item.rs	/^pub struct Quality(pub u16);$/;"	s
QualityItem	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/shared/quality_item.rs	/^pub struct QualityItem<T> {$/;"	s
README	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/benches/client.rs	/^static README: &'static [u8] = include_bytes!("..\/README.md");$/;"	c
REFCOUNT	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/log-0.3.6/src/lib.rs	/^static REFCOUNT: AtomicUsize = ATOMIC_USIZE_INIT;$/;"	c
Range	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/range.rs	/^pub enum Range {$/;"	g
RangeUnit	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/accept_ranges.rs	/^pub enum RangeUnit {$/;"	g
Raw	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/response.rs	/^pub struct Raw<'a> {$/;"	s
RawStatus	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/mod.rs	/^pub struct RawStatus(pub u16, pub Cow<'static, str>);$/;"	s
RedirectPolicy	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/mod.rs	/^pub enum RedirectPolicy {$/;"	g
ReferrerPolicy	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/referrer_policy.rs	/^pub enum ReferrerPolicy {$/;"	g
Reject	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/server/mod.rs	/^        struct Reject;$/;"	s
Request	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/request.rs	/^pub struct Request<W> {$/;"	s
Request	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/server/request.rs	/^pub struct Request<'a, 'b: 'a> {$/;"	s
RequestBuilder	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/mod.rs	/^pub struct RequestBuilder<'a> {$/;"	s
RequestHead	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/message.rs	/^pub struct RequestHead {$/;"	s
RequestUri	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/uri.rs	/^pub enum RequestUri {$/;"	g
Response	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/response.rs	/^pub struct Response {$/;"	s
Response	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/server/response.rs	/^pub struct Response<'a, W: Any = Fresh> {$/;"	s
Response	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/response.rs	/^pub struct Response<'a, 'b> {$/;"	s
ResponseAction	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/filter.rs	/^pub enum ResponseAction<'a> {$/;"	g
ResponseFilter	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/filter.rs	/^pub trait ResponseFilter: Send + Sync {$/;"	t
ResponseHead	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/message.rs	/^pub struct ResponseHead {$/;"	s
Result	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/error.rs	/^pub type Result<T> = ::std::result::Result<T, Error>;$/;"	T
Route	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/mod.rs	/^pub trait Route<'a> {$/;"	t
RouteIter	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/mod.rs	/^pub enum RouteIter<I: Iterator> {$/;"	g
RouteState	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/mod.rs	/^pub struct RouteState<'a> {$/;"	s
Router	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/mod.rs	/^pub trait Router: Send + Sync + 'static {$/;"	t
STATE	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/log-0.3.6/src/lib.rs	/^static STATE: AtomicUsize = ATOMIC_USIZE_INIT;$/;"	c
Salutation	/home/kibbles/Projects/rust/tin_can_telephone/src/example.rs	/^pub struct Salutation(&'static str);$/;"	s
Scheme	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/pool.rs	/^enum Scheme {$/;"	g
Scheme	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/authorization.rs	/^pub trait Scheme: FromStr + fmt::Debug + Clone + Send + Sync {$/;"	t
Scheme	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/server/config.rs	/^pub enum Scheme {$/;"	g
SegmentType	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/context/hypermedia.rs	/^pub enum SegmentType {$/;"	g
Segments	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/mod.rs	/^    type Segments = FlatMap<<&'a I as IntoIterator>::IntoIter, <<T as Deref>::Target as Route<'a>>::Segments, fn(&'a T) -> <<T as Deref>::Target as Route<'a>>::Segments>;$/;"	T
Segments	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/mod.rs	/^    type Segments = RouteIter<Split<'a, u8, &'static fn(&u8) -> bool>>;$/;"	T
Segments	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/mod.rs	/^    type Segments: Iterator<Item=&'a [u8]>;$/;"	T
Sentinel	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/server/listener.rs	/^struct Sentinel<T: Send + 'static> {$/;"	s
Server	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/server/mod.rs	/^pub struct Server<L = HttpListener> {$/;"	s
Server	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/server/mod.rs	/^pub struct Server<R: Router> {$/;"	s
ServerInstance	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/server/instance.rs	/^pub struct ServerInstance<R: Router> {$/;"	s
ServerWrapper	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^    pub struct ServerWrapper(Arc<ServerBuilder>);$/;"	s
SetCookie	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/set_cookie.rs	/^pub struct SetCookie(pub Vec<CookiePair>);$/;"	s
SetLoggerError	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/log-0.3.6/src/lib.rs	/^pub struct SetLoggerError(());$/;"	s
ShutdownLoggerError	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/log-0.3.6/src/lib.rs	/^pub struct ShutdownLoggerError(());$/;"	s
SlowRead	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/buffer.rs	/^    struct SlowRead(u8);$/;"	s
Ssl	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^pub trait Ssl {$/;"	t
SslClient	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^pub trait SslClient<T: NetworkStream + Send + Clone = HttpStream> {$/;"	t
SslServer	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^pub trait SslServer<T: NetworkStream + Send + Clone = HttpStream> {$/;"	t
State	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/log-0.3.6/tests/filters.rs	/^struct State {$/;"	s
StatusClass	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/status.rs	/^pub enum StatusClass {$/;"	g
StatusCode	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/status.rs	/^pub enum StatusCode {$/;"	g
Stream	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/benches/client.rs	/^    type Stream = MockStream;$/;"	T
Stream	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/pool.rs	/^    type Stream = PooledStream<S>;$/;"	T
Stream	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/proxy.rs	/^        type Stream = Void;$/;"	T
Stream	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/proxy.rs	/^    type Stream = Proxied<C::Stream, S::Stream>;$/;"	T
Stream	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h1.rs	/^    type Stream = Box<NetworkStream + Send>;$/;"	T
Stream	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h1.rs	/^enum Stream {$/;"	g
Stream	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h2.rs	/^    type Stream = Http2Stream<S>;$/;"	T
Stream	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/mock.rs	/^            type Stream = $crate::mock::MockStream;$/;"	T
Stream	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/mock.rs	/^            type Stream = ::mock::MockStream;$/;"	T
Stream	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/mock.rs	/^    type Stream = CloneableMockStream;$/;"	T
Stream	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/mock.rs	/^    type Stream = MockStream;$/;"	T
Stream	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/mock.rs	/^    type Stream = T;$/;"	T
Stream	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^        type Stream = SslStream<HttpStream>;$/;"	T
Stream	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^        type Stream = SslStream<T>;$/;"	T
Stream	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^        type Stream = Stream;$/;"	T
Stream	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^    pub struct Stream(Arc<Mutex<SslStream<HttpStream>>>);$/;"	s
Stream	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^    type Stream = <S as Ssl>::Stream;$/;"	T
Stream	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^    type Stream = HttpStream;$/;"	T
Stream	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^    type Stream = HttpsStream<S::Stream>;$/;"	T
Stream	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^    type Stream = S::Stream;$/;"	T
Stream	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^    type Stream: Into<Box<NetworkStream + Send>>;$/;"	T
Stream	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^    type Stream: NetworkStream + Send + Clone;$/;"	T
Streaming	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^pub enum Streaming {}$/;"	g
StrictTransportSecurity	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/strict_transport_security.rs	/^pub struct StrictTransportSecurity {$/;"	s
Subject	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h1.rs	/^    type Subject = (Method, RequestUri);$/;"	T
Subject	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h1.rs	/^    type Subject = RawStatus;$/;"	T
Subject	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h1.rs	/^    type Subject;$/;"	T
Target	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/authorization.rs	/^    type Target = S;$/;"	T
Target	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/mod.rs	/^            type Target = $to;$/;"	T
Target	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/internals/cell.rs	/^    type Target = Option<T>;$/;"	T
Target	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/mod.rs	/^    type Target = Cow<'static, str>;$/;"	T
Target	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/log-0.3.6/src/lib.rs	/^    type Target = Log;$/;"	T
Target	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/context/maybe_utf8.rs	/^    type Target = Vec<u8>;$/;"	T
Target	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/context/maybe_utf8.rs	/^    type Target=[u8];$/;"	T
Target	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/context/parameters.rs	/^    type Target = HashMap<MaybeUtf8Owned, MaybeUtf8Owned>;$/;"	T
TestHandler	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/tree_router.rs	/^    struct TestHandler(&'static str);$/;"	s
Timeouts	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/server/mod.rs	/^struct Timeouts {$/;"	s
TreeRouter	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/tree_router.rs	/^pub struct TreeRouter<T: Router + Default> {$/;"	s
TryParse	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h1.rs	/^trait TryParse {$/;"	t
TryParseResult	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h1.rs	/^type TryParseResult<T> = Result<httparse::Status<(Incoming<T>, usize)>, Error>;$/;"	T
UNINITIALIZED	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/log-0.3.6/src/lib.rs	/^const UNINITIALIZED: usize = 0;$/;"	c
Uri	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/context/mod.rs	/^pub enum Uri {$/;"	g
Value	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/mod.rs	/^            type Value = Headers;$/;"	T
VariableIter	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/mod.rs	/^struct VariableIter<'a, I> {$/;"	s
Variables	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/variables.rs	/^pub struct Variables<H: Handler> {$/;"	s
Void	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/proxy.rs	/^    pub enum Void {}$/;"	g
Void	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/error.rs	/^pub enum Void {}$/;"	g
Worker	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/server/mod.rs	/^struct Worker<H: Handler + 'static> {$/;"	s
Wrapper	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h1.rs	/^struct Wrapper<T> {$/;"	s
_LOC	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/log-0.3.6/src/macros.rs	/^        static _LOC: $crate::LogLocation = $crate::LogLocation {$/;"	c
__enabled	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/log-0.3.6/src/lib.rs	/^pub fn __enabled(level: LogLevel, target: &str) -> bool {$/;"	f
__hyper__deref	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/mod.rs	/^macro_rules! __hyper__deref {$/;"	d
__hyper__tm	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/mod.rs	/^macro_rules! __hyper__tm {$/;"	d
__hyper_generate_header_serialization	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/mod.rs	/^macro_rules! __hyper_generate_header_serialization {$/;"	d
__log	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/log-0.3.6/src/lib.rs	/^pub fn __log(level: LogLevel, target: &str, loc: &LogLocation,$/;"	f
__rustful_insert_internal	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/macros.rs	/^macro_rules! __rustful_insert_internal {$/;"	d
__rustful_route_expr	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/macros.rs	/^macro_rules! __rustful_route_expr {$/;"	d
__rustful_to_expr	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/macros.rs	/^macro_rules! __rustful_to_expr {$/;"	d
__rustful_to_path	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/macros.rs	/^macro_rules! __rustful_to_path {$/;"	d
__static_max_level	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/log-0.3.6/src/lib.rs	/^pub fn __static_max_level() -> LogLevelFilter {$/;"	f
_assert_send	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/lib.rs	/^fn _assert_send<T: Send>() {$/;"	f
_assert_sync	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/lib.rs	/^fn _assert_sync<T: Sync>() {$/;"	f
abort	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/filter.rs	/^    pub fn abort(message: String) -> ResponseAction<'a> {$/;"	f
abort	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/filter.rs	/^    pub fn abort(status: StatusCode) -> ContextAction {$/;"	f
accept	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^    fn accept(&mut self) -> ::Result<HttpStream> {$/;"	f
accept	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^    fn accept(&mut self) -> ::Result<S::Stream> {$/;"	f
accept	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^    fn accept(&mut self) -> ::Result<Self::Stream>;$/;"	f
accept	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/server/listener.rs	/^    pub fn accept<F>(self, work: F, threads: usize)$/;"	f
add_link	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/tree_router.rs	/^    macro_rules! add_link {$/;"	d
add_stream	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/mock.rs	/^    pub fn add_stream(&mut self, stream: CloneableMockStream) {$/;"	f
any_v4	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/server/config.rs	/^    pub fn any_v4(port: u16) -> Host {$/;"	f
apply_to_cookie_jar	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/set_cookie.rs	/^    pub fn apply_to_cookie_jar(&self, jar: &mut CookieJar) {$/;"	f
args	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/log-0.3.6/src/lib.rs	/^    pub fn args(&self) -> &fmt::Arguments<'a> {$/;"	f
as_buffer	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/context/maybe_utf8.rs	/^    pub fn as_buffer(&mut self) -> Buffer {$/;"	f
as_bytes	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/context/maybe_utf8.rs	/^    pub fn as_bytes(&self) -> &[u8] where S: AsRef<[u8]>, V: AsRef<[u8]> {$/;"	f
as_bytes	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/response.rs	/^    pub fn as_bytes(&self) -> &[u8] {$/;"	f
as_multipart	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/context/body.rs	/^    pub fn as_multipart<'r>(&'r mut self) -> Option<Multipart<MultipartRequest<'r, 'a, 'b>>> {$/;"	f
as_mut	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h1.rs	/^    pub fn as_mut(&mut self) -> &mut T { self.obj.as_mut().unwrap() }$/;"	f
as_mut	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/context/parameters.rs	/^    fn as_mut(&mut self) -> &mut HashMap<MaybeUtf8Owned, MaybeUtf8Owned> {$/;"	f
as_path	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/context/mod.rs	/^    pub fn as_path(&self) -> Option<MaybeUtf8Slice> {$/;"	f
as_raw_fd	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^    fn as_raw_fd(&self) -> ::std::os::unix::io::RawFd {$/;"	f
as_raw_socket	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^    fn as_raw_socket(&self) -> ::std::os::windows::io::RawSocket {$/;"	f
as_ref	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/mod.rs	/^    fn as_ref(&self) -> &str {$/;"	f
as_ref	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h1.rs	/^    pub fn as_ref(&self) -> &T { self.obj.as_ref().unwrap() }$/;"	f
as_ref	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/method.rs	/^    fn as_ref(&self) -> &str {$/;"	f
as_ref	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/context/maybe_utf8.rs	/^    fn as_ref(&self) -> &[u8] {$/;"	f
as_ref	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/context/parameters.rs	/^    fn as_ref(&self) -> &HashMap<MaybeUtf8Owned, MaybeUtf8Owned> {$/;"	f
as_slice	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/context/maybe_utf8.rs	/^    pub fn as_slice<Sref: ?Sized, Vref: ?Sized>(&self) -> MaybeUtf8<&Sref, &Vref> where S: AsRef<Sref>, V: AsRef<Vref> {$/;"	f
as_string	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/response.rs	/^    pub fn as_string(&self) -> Result<&str, Utf8Error> {$/;"	f
as_utf8	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/context/maybe_utf8.rs	/^    pub fn as_utf8(&self) -> Option<&str> where S: AsRef<str> {$/;"	f
as_utf8_lossy	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/context/maybe_utf8.rs	/^    pub fn as_utf8_lossy(&self) -> Cow<str> where S: AsRef<str>, V: AsRef<[u8]> {$/;"	f
as_utf8_path	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/context/mod.rs	/^    pub fn as_utf8_path(&self) -> Option<&str> {$/;"	f
as_utf8_path_lossy	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/context/mod.rs	/^    pub fn as_utf8_path_lossy(&self) -> Option<Cow<str>> {$/;"	f
assert_client_preface	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h2.rs	/^    fn assert_client_preface(server_stream: &mut MockStream) {$/;"	f
assert_display	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/uri.rs	/^    fn assert_display(expected_string: &str, request_uri: RequestUri) {$/;"	f
assert_no_body	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/request.rs	/^    fn assert_no_body(s: &str) {$/;"	f
begin	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/filter.rs	/^    fn begin(&self, context: FilterContext, status: StatusCode, headers: &mut Headers) ->$/;"	f
bench_format	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/mod.rs	/^            fn bench_format(b: &mut Bencher) {$/;"	f
bench_header	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/mod.rs	/^macro_rules! bench_header($/;"	d
bench_headers_fmt	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/mod.rs	/^    fn bench_headers_fmt(b: &mut Bencher) {$/;"	f
bench_headers_from_raw	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/mod.rs	/^    fn bench_headers_from_raw(b: &mut Bencher) {$/;"	f
bench_headers_get	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/mod.rs	/^    fn bench_headers_get(b: &mut Bencher) {$/;"	f
bench_headers_get_miss	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/mod.rs	/^    fn bench_headers_get_miss(b: &mut Bencher) {$/;"	f
bench_headers_has	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/mod.rs	/^    fn bench_headers_has(b: &mut Bencher) {$/;"	f
bench_headers_new	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/mod.rs	/^    fn bench_headers_new(b: &mut Bencher) {$/;"	f
bench_headers_set	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/mod.rs	/^    fn bench_headers_set(b: &mut Bencher) {$/;"	f
bench_headers_view_is	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/mod.rs	/^    fn bench_headers_view_is(b: &mut Bencher) {$/;"	f
bench_mock_hyper	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/benches/client.rs	/^fn bench_mock_hyper(b: &mut test::Bencher) {$/;"	f
bench_parse	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/mod.rs	/^            fn bench_parse(b: &mut Bencher) {$/;"	f
bench_parse_incoming	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h1.rs	/^    fn bench_parse_incoming(b: &mut Bencher) {$/;"	f
body	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/mod.rs	/^    pub fn body<B: Into<Body<'a>>>(mut self, body: B) -> RequestBuilder<'a> {$/;"	f
body	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/context/body.rs	/^    fn body(self) -> Self {$/;"	f
borrow	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/context/maybe_utf8.rs	/^    fn borrow(&self) -> &[u8] {$/;"	f
borrow_writer	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/response.rs	/^    fn borrow_writer(&mut self) -> Result<&mut hyper::server::response::Response<'a, hyper::net::Streaming>, Error> {$/;"	f
borrow_writer	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/response.rs	/^    fn borrow_writer(&mut self) -> io::Result<&mut hyper::server::response::Response<'a, hyper::net::Streaming>> {$/;"	f
build	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/method_router.rs	/^    fn build<'a, R: Into<InsertState<'a, I>>, I: Iterator<Item = &'a [u8]>>(method: Method, route: R, item: Self::Handler) -> MethodRouter<T> {$/;"	f
build	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/mod.rs	/^    fn build<'a, R: Into<InsertState<'a, I>>, I: Iterator<Item = &'a [u8]>>(_method: Method, _route: R, item: H) -> H {$/;"	f
build	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/mod.rs	/^    fn build<'a, R: Into<InsertState<'a, I>>, I: Iterator<Item = &'a [u8]>>(method: Method, route: R, item: Self::Handler) -> Option<T> {$/;"	f
build	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/mod.rs	/^    fn build<'a, R: Into<InsertState<'a, I>>, I: Iterator<Item = &'a [u8]>>(method: Method, route: R, item: Self::Handler) -> Self;$/;"	f
build	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/or_else.rs	/^    fn build<'a, R: Into<InsertState<'a, I>>, I: Iterator<Item = &'a [u8]>>(method: Method, route: R, item: H) -> OrElse<Inner, H> {$/;"	f
build	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/tree_router.rs	/^    fn build<'a, R: Into<InsertState<'a, I>>, I: Iterator<Item = &'a [u8]>>(method: Method, route: R, item: Self::Handler) -> TreeRouter<T> {$/;"	f
build	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/variables.rs	/^    fn build<'a, R: Into<InsertState<'a, I>>, I: Iterator<Item = &'a [u8]>>(_method: Method, route: R, item: Self::Handler) -> Variables<H> {$/;"	f
build	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/server/mod.rs	/^    pub fn build(self) -> (ServerInstance<R>, Scheme) {$/;"	f
build_http2_response	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/mock.rs	/^pub fn build_http2_response(status: &[u8], headers: &Headers, body: Option<Vec<u8>>) -> Vec<u8> {$/;"	f
byte	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h1.rs	/^    macro_rules! byte ($/;"	d
bytes	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/range.rs	/^    pub fn bytes(from: u64, to: u64) -> Range {$/;"	f
bytes_multi	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/range.rs	/^    pub fn bytes_multi(ranges: Vec<(u64, u64)>) -> Range {$/;"	f
canonical_reason	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/status.rs	/^    pub fn canonical_reason(&self) -> Option<&'static str> {$/;"	f
cause	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/error.rs	/^    fn cause(&self) -> Option<&StdError> {$/;"	f
cause	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h2.rs	/^    fn cause(&self) -> Option<&::std::error::Error> {$/;"	f
cause	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/response.rs	/^    fn cause(&self) -> Option<&std::error::Error> {$/;"	f
check	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/tree_router.rs	/^    macro_rules! check {$/;"	d
check_continue	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/server/mod.rs	/^            fn check_continue(&self, _: (&Method, &RequestUri, &Headers)) -> StatusCode {$/;"	f
check_continue	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/server/mod.rs	/^    fn check_continue(&self, _: (&Method, &RequestUri, &Headers)) -> StatusCode {$/;"	f
check_path	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/file.rs	/^pub fn check_path<P: ?Sized + AsRef<Path>>(path: &P) -> Result<(), Component> {$/;"	f
check_slice_validity	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/shared/entity.rs	/^fn check_slice_validity(slice: &str) -> bool {$/;"	f
class	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/status.rs	/^    pub fn class(&self) -> StatusClass {$/;"	f
clear	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/mod.rs	/^    pub fn clear(&mut self) {$/;"	f
clear_idle	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/pool.rs	/^    pub fn clear_idle(&mut self) {$/;"	f
clone	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/benches/client.rs	/^    fn clone(&self) -> MockStream {$/;"	f
clone	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/mod.rs	/^    fn clone(&self) -> RedirectPolicy {$/;"	f
clone	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/internals/cell.rs	/^    fn clone(&self) -> OptCell<T> {$/;"	f
clone	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/internals/cell.rs	/^    fn clone(&self) -> PtrMapCell<V> {$/;"	f
clone	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/mod.rs	/^    fn clone(&self) -> Box<HeaderFormat + Send + Sync> {$/;"	f
clone	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^    fn clone(&self) -> HttpListener {$/;"	f
clone	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^    fn clone(&self) -> HttpStream {$/;"	f
clone	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/status.rs	/^    fn clone(&self) -> StatusCode {$/;"	f
clone	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/log-0.3.6/src/lib.rs	/^    fn clone(&self) -> LogLevel {$/;"	f
clone	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/log-0.3.6/src/lib.rs	/^    fn clone(&self) -> LogLevelFilter {$/;"	f
clone_box	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/mod.rs	/^    fn clone_box(&self) -> Box<HeaderFormat + Send + Sync> {$/;"	f
clone_box	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/mod.rs	/^    fn clone_box(&self) -> Box<HeaderFormat + Send + Sync>;$/;"	f
close	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/pool.rs	/^    fn close(&mut self, how: Shutdown) -> io::Result<()> {$/;"	f
close	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/proxy.rs	/^        fn close(&mut self, _how: Shutdown) -> io::Result<()> {$/;"	f
close	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/proxy.rs	/^    fn close(&mut self, how: Shutdown) -> io::Result<()> {$/;"	f
close	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/connection.rs	/^    pub fn close() -> Connection {$/;"	f
close	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h2.rs	/^    fn close(&mut self) -> Result<(), io::Error> {$/;"	f
close	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/mock.rs	/^    fn close(&mut self) -> Result<(), io::Error> {$/;"	f
close	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/mock.rs	/^    fn close(&mut self, _how: Shutdown) -> io::Result<()> {$/;"	f
close	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/mock.rs	/^    fn close(&mut self, how: Shutdown) -> io::Result<()> {$/;"	f
close	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^        fn close(&mut self, how: Shutdown) -> io::Result<()> {$/;"	f
close	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^    fn close(&mut self, _how: Shutdown) -> io::Result<()> {$/;"	f
close	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^    fn close(&mut self, how: Shutdown) -> io::Result<()> {$/;"	f
close	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/server/mod.rs	/^    pub fn close(&mut self) -> ::Result<()> {$/;"	f
close_connection	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h1.rs	/^    fn close_connection(&mut self) -> ::Result<()> {$/;"	f
close_connection	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h2.rs	/^    fn close_connection(&mut self) -> ::Result<()> {$/;"	f
close_connection	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/message.rs	/^    fn close_connection(&mut self) -> ::Result<()>;$/;"	f
cmp	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/status.rs	/^    fn cmp(&self, other: &StatusCode) -> Ordering {$/;"	f
cmp	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/log-0.3.6/src/lib.rs	/^    fn cmp(&self, other: &LogLevel) -> cmp::Ordering {$/;"	f
cmp	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/log-0.3.6/src/lib.rs	/^    fn cmp(&self, other: &LogLevelFilter) -> cmp::Ordering {$/;"	f
connect	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/benches/client.rs	/^    fn connect(&self, _: &str, _: u16, _: &str) -> hyper::Result<MockStream> {$/;"	f
connect	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/pool.rs	/^    fn connect(&self, host: &str, port: u16, scheme: &str) -> ::Result<PooledStream<S>> {$/;"	f
connect	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/proxy.rs	/^    fn connect(&self, host: &str, port: u16, scheme: &str) -> ::Result<Self::Stream> {$/;"	f
connect	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h1.rs	/^    fn connect(&self, host: &str, port: u16, scheme: &str)$/;"	f
connect	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h2.rs	/^    fn connect(mut self) -> Result<ClientStream<Self::Stream>, Self::Err> {$/;"	f
connect	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/mock.rs	/^            fn connect(&self, _: &str, _: u16, _: &str)$/;"	f
connect	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/mock.rs	/^            fn connect(&self, host: &str, port: u16, scheme: &str)$/;"	f
connect	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/mock.rs	/^    fn connect(&self, _host: &str, _port: u16, _scheme: &str) -> ::Result<MockStream> {$/;"	f
connect	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/mock.rs	/^    fn connect(&self, _host: &str, _port: u16, _scheme: &str)$/;"	f
connect	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^    fn connect(&self, host: &str, port: u16, scheme: &str) -> ::Result<HttpStream> {$/;"	f
connect	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^    fn connect(&self, host: &str, port: u16, scheme: &str) -> ::Result<Self::Stream> {$/;"	f
connect	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^    fn connect(&self, host: &str, port: u16, scheme: &str) -> ::Result<Self::Stream>;$/;"	f
construct	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/server/response.rs	/^    pub fn construct(version: version::HttpVersion,$/;"	f
consume	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/buffer.rs	/^    fn consume(&mut self, amt: usize) {$/;"	f
contains_key	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/context/parameters.rs	/^    pub fn contains_key<K: ?Sized>(&self, key: &K) -> bool where$/;"	f
content_type	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/macros.rs	/^macro_rules! content_type {$/;"	d
convert	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/macros.rs	/^    pub fn convert(self) -> T {$/;"	f
cookie_jar	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/cookie.rs	/^fn cookie_jar() {$/;"	f
cookie_jar	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/set_cookie.rs	/^fn cookie_jar() {$/;"	f
debug	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/log-0.3.6/src/macros.rs	/^macro_rules! debug {$/;"	d
decode_json_body	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/context/body.rs	/^    pub fn decode_json_body<T: Decodable>(&mut self) -> json::DecodeResult<T> {$/;"	f
deconstruct	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/server/request.rs	/^    pub fn deconstruct(self) -> (SocketAddr, Method, Headers,$/;"	f
deconstruct	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/server/response.rs	/^    pub fn deconstruct(self) -> (version::HttpVersion, HttpWriter<&'a mut (Write + 'a)>,$/;"	f
default	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/mod.rs	/^    fn default() -> Client { Client::new() }$/;"	f
default	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/mod.rs	/^    fn default() -> RedirectPolicy {$/;"	f
default	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/pool.rs	/^    fn default() -> Config {$/;"	f
default	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/shared/quality_item.rs	/^    fn default() -> Quality {$/;"	f
default	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^        fn default() -> Openssl {$/;"	f
default	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^        fn default() -> OpensslClient {$/;"	f
default	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/server/mod.rs	/^    fn default() -> Timeouts {$/;"	f
default	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/context/parameters.rs	/^    fn default() -> Parameters {$/;"	f
default	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/method_router.rs	/^    fn default() -> MethodRouter<T> {$/;"	f
default	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/or_else.rs	/^    fn default() -> OrElse<T, H> {$/;"	f
default	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/tree_router.rs	/^    fn default() -> TreeRouter<T> {$/;"	f
default	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/variables.rs	/^    fn default() -> Variables<H> {$/;"	f
default	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/server/config.rs	/^    fn default() -> Global {$/;"	f
default	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/server/mod.rs	/^    fn default() -> Server<R> {$/;"	f
default_code	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/status.rs	/^    pub fn default_code(&self) -> StatusCode {$/;"	f
delete	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/mod.rs	/^    pub fn delete<U: IntoUrl>(&self, url: U) -> RequestBuilder {$/;"	f
deref	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/authorization.rs	/^    fn deref(&self) -> &S {$/;"	f
deref	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/mod.rs	/^            fn deref(&self) -> &$to {$/;"	f
deref	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/internals/cell.rs	/^    fn deref(&self) -> &Option<T> {$/;"	f
deref	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/mod.rs	/^    fn deref(&self) -> &Cow<'static, str> {$/;"	f
deref	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/log-0.3.6/src/lib.rs	/^    fn deref(&self) -> &(Log + 'static) {$/;"	f
deref	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/context/maybe_utf8.rs	/^    fn deref(&self) -> &Vec<u8> {$/;"	f
deref	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/context/maybe_utf8.rs	/^    fn deref(&self) -> &[u8] {$/;"	f
deref	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/context/parameters.rs	/^    fn deref(&self) -> &HashMap<MaybeUtf8Owned, MaybeUtf8Owned> {$/;"	f
deref_mut	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/authorization.rs	/^    fn deref_mut(&mut self) -> &mut S {$/;"	f
deref_mut	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/mod.rs	/^            fn deref_mut(&mut self) -> &mut $to {$/;"	f
deref_mut	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/mod.rs	/^    fn deref_mut(&mut self) -> &mut Cow<'static, str> {$/;"	f
deref_mut	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/context/maybe_utf8.rs	/^    fn deref_mut(&mut self) -> &mut Vec<u8> {$/;"	f
deref_mut	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/context/parameters.rs	/^    fn deref_mut(&mut self) -> &mut HashMap<MaybeUtf8Owned, MaybeUtf8Owned> {$/;"	f
description	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/error.rs	/^    fn description(&self) -> &str {$/;"	f
description	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h2.rs	/^    fn description(&self) -> &str {$/;"	f
description	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/log-0.3.6/src/lib.rs	/^    fn description(&self) -> &str { "set_logger() called multiple times" }$/;"	f
description	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/log-0.3.6/src/lib.rs	/^    fn description(&self) -> &str { "shutdown_logger() called without an active logger" }$/;"	f
description	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/handler.rs	/^    fn description(&self) -> Option<Cow<'static, str>> {$/;"	f
description	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/response.rs	/^    fn description(&self) -> &str {$/;"	f
deserialize	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/mod.rs	/^            fn deserialize<D>(deserializer: &mut D) -> Result<$id, D::Error>$/;"	f
deserialize	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/mod.rs	/^    fn deserialize<D>(deserializer: &mut D) -> Result<Headers, D::Error> where D: Deserializer {$/;"	f
deserialize	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/mod.rs	/^    fn deserialize<D>(deserializer: &mut D) -> Result<RawStatus, D::Error> where D: Deserializer {$/;"	f
deserialize	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/method.rs	/^    fn deserialize<D>(deserializer: &mut D) -> Result<Method, D::Error> where D: Deserializer {$/;"	f
downcast	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/message.rs	/^    pub fn downcast<T: Any>(self: Box<HttpMessage>)$/;"	f
downcast	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^    pub fn downcast<T: Any>(self: Box<NetworkStream + Send>)$/;"	f
downcast	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^    pub fn downcast<T: Any>(self: Box<NetworkStream>)$/;"	f
downcast_mut	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/message.rs	/^    pub fn downcast_mut<T: Any>(&mut self) -> Option<&mut T> {$/;"	f
downcast_mut	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^    pub fn downcast_mut<T: Any>(&mut self) -> Option<&mut T> {$/;"	f
downcast_mut_unchecked	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/mod.rs	/^    unsafe fn downcast_mut_unchecked<T: 'static>(&mut self) -> &mut T {$/;"	f
downcast_mut_unchecked	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/message.rs	/^    unsafe fn downcast_mut_unchecked<T: 'static>(&mut self) -> &mut T {$/;"	f
downcast_mut_unchecked	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^    unsafe fn downcast_mut_unchecked<T: 'static>(&mut self) -> &mut T {$/;"	f
downcast_ref	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/message.rs	/^    pub fn downcast_ref<T: Any>(&self) -> Option<&T> {$/;"	f
downcast_ref	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^    pub fn downcast_ref<T: Any>(&self) -> Option<&T> {$/;"	f
downcast_ref	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/server/request.rs	/^    pub fn downcast_ref<T: NetworkStream>(&self) -> Option<&T> {$/;"	f
downcast_ref_unchecked	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/mod.rs	/^    unsafe fn downcast_ref_unchecked<T: 'static>(&self) -> &T {$/;"	f
downcast_ref_unchecked	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/message.rs	/^    unsafe fn downcast_ref_unchecked<T: 'static>(&self) -> &T {$/;"	f
downcast_ref_unchecked	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^    unsafe fn downcast_ref_unchecked<T: 'static>(&self) -> &T {$/;"	f
downcast_unchecked	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/message.rs	/^    unsafe fn downcast_unchecked<T: 'static>(self: Box<HttpMessage>) -> Box<T>  {$/;"	f
downcast_unchecked	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^    unsafe fn downcast_unchecked<T: 'static>(self: Box<NetworkStream + Send>) -> Box<T>  {$/;"	f
downcast_unchecked	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^    unsafe fn downcast_unchecked<T: 'static>(self: Box<NetworkStream>) -> Box<T>  {$/;"	f
drop	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/pool.rs	/^    fn drop(&mut self) {$/;"	f
drop	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/response.rs	/^    fn drop(&mut self) {$/;"	f
drop	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/server/listener.rs	/^    fn drop(&mut self) {$/;"	f
drop	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/server/mod.rs	/^    fn drop(&mut self) {$/;"	f
drop	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/server/response.rs	/^    fn drop(&mut self) {$/;"	f
drop	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/log-0.3.6/src/lib.rs	/^    fn drop(&mut self) {$/;"	f
drop	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/context/maybe_utf8.rs	/^    fn drop(&mut self) {$/;"	f
drop	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/response.rs	/^    fn drop(&mut self) {$/;"	f
eat	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h1.rs	/^fn eat<R: Read>(rdr: &mut R, bytes: &[u8]) -> io::Result<()> {$/;"	f
echo	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/examples/server.rs	/^fn echo(mut req: Request, mut res: Response) {$/;"	f
enabled	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/log-0.3.6/src/lib.rs	/^    fn enabled(&self, _: &LogMetadata) -> bool { false }$/;"	f
enabled	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/log-0.3.6/src/lib.rs	/^    fn enabled(&self, metadata: &LogMetadata) -> bool;$/;"	f
enabled	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/log-0.3.6/tests/filters.rs	/^    fn enabled(&self, _: &LogMetadata) -> bool {$/;"	f
end	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h1.rs	/^    pub fn end(mut self) -> Result<W, EndError<W>> {$/;"	f
end	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/server/response.rs	/^        fn end<W: Write>(w: &mut W) {$/;"	f
end	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/server/response.rs	/^    pub fn end(self) -> io::Result<()> {$/;"	f
end	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/filter.rs	/^    fn end(&self, context: FilterContext) -> ResponseAction;$/;"	f
end	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/response.rs	/^    pub fn end(mut self) -> Result<(), Error> {$/;"	f
end	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/response.rs	/^    pub fn end(mut self) -> io::Result<()> {$/;"	f
entry	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/context/parameters.rs	/^    pub fn entry<K>(&mut self, key: K) -> Entry<MaybeUtf8Owned, MaybeUtf8Owned> where K: Into<MaybeUtf8Owned> {$/;"	f
eq	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/origin.rs	/^    fn eq(&self, other: &Origin) -> bool {$/;"	f
eq	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/mod.rs	/^    fn eq(&self, other: &Headers) -> bool {$/;"	f
eq	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/mock.rs	/^    fn eq(&self, other: &MockStream) -> bool {$/;"	f
eq	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/status.rs	/^    fn eq(&self, other: &StatusCode) -> bool {$/;"	f
eq	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/log-0.3.6/src/lib.rs	/^    fn eq(&self, other: &LogLevel) -> bool {$/;"	f
eq	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/log-0.3.6/src/lib.rs	/^    fn eq(&self, other: &LogLevelFilter) -> bool {$/;"	f
eq	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/context/maybe_utf8.rs	/^    fn eq(&self, other: &B) -> bool {$/;"	f
eq	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/context/maybe_utf8.rs	/^    fn eq(&self, other: &MaybeUtf8<S, V>) -> bool {$/;"	f
eq	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/context/parameters.rs	/^    fn eq(&self, other: &Parameters) -> bool {$/;"	f
eq_ignore_ascii_case	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/log-0.3.6/src/lib.rs	/^fn eq_ignore_ascii_case(a: &str, b: &str) -> bool {$/;"	f
error	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/log-0.3.6/src/macros.rs	/^macro_rules! error {$/;"	d
excluding_subdomains	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/strict_transport_security.rs	/^    pub fn excluding_subdomains(max_age: u64) -> StrictTransportSecurity {$/;"	f
ext_to_mime	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/file.rs	/^pub fn ext_to_mime(ext: &str) -> Option<Mime> {$/;"	f
extend	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/mod.rs	/^    fn extend<I: IntoIterator<Item=HeaderView<'a>>>(&mut self, iter: I) {$/;"	f
extend	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/context/parameters.rs	/^    fn extend<T: IntoIterator<Item=(K, V)>>(&mut self, iter: T) {$/;"	f
file	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/log-0.3.6/src/lib.rs	/^    pub fn file(&self) -> &str {$/;"	f
fill_buf	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/buffer.rs	/^    fn fill_buf(&mut self) -> io::Result<&[u8]> {$/;"	f
filter_content	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/response.rs	/^fn filter_content<'a, 'd: 'a, Content: Into<Data<'d>>>(filters: &'a [Box<ResponseFilter>], content: Content, global: &Global, filter_storage: &mut AnyMap) -> Action<'a> {$/;"	f
filter_end	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/response.rs	/^fn filter_end<'a>(filters: &'a [Box<ResponseFilter>], global: &Global, filter_storage: &mut AnyMap) -> Result<Vec<Action<'a>>, Error> {$/;"	f
filter_headers	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/response.rs	/^fn filter_headers<'a>($/;"	f
filter_storage	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/response.rs	/^    pub fn filter_storage(&self) -> &AnyMap {$/;"	f
filter_storage_mut	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/response.rs	/^    pub fn filter_storage_mut(&mut self) -> &mut AnyMap {$/;"	f
find	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/method_router.rs	/^    fn find<'a>(&'a self, method: &Method, route: &mut RouteState) -> Endpoint<'a, Self::Handler> {$/;"	f
find	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/mod.rs	/^    fn find<'a>(&'a self, _method: &Method, _route: &mut RouteState) -> Endpoint<'a, H> {$/;"	f
find	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/mod.rs	/^    fn find<'a>(&'a self, method: &Method, route: &mut RouteState) -> Endpoint<'a, Self::Handler> {$/;"	f
find	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/mod.rs	/^    fn find<'a>(&'a self, method: &Method, route: &mut RouteState) -> Endpoint<'a, Self::Handler>;$/;"	f
find	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/or_else.rs	/^    fn find<'a>(&'a self, method: &Method, route: &mut RouteState) -> Endpoint<'a, H> {$/;"	f
find	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/tree_router.rs	/^    fn find<'a>(&'a self, method: &Method, route: &mut RouteState) -> Endpoint<'a, Self::Handler> {$/;"	f
find	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/variables.rs	/^    fn find<'a>(&'a self, _method: &Method, route: &mut RouteState) -> Endpoint<'a, H> {$/;"	f
find_or_insert_router	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/tree_router.rs	/^    fn find_or_insert_router<'a>(&'a mut self, key: &[u8]) -> &'a mut TreeRouter<T> {$/;"	f
finish	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/response.rs	/^    fn finish(&mut self) -> Result<(), Error> {$/;"	f
flush	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/benches/client.rs	/^    fn flush(&mut self) -> io::Result<()> {$/;"	f
flush	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/pool.rs	/^    fn flush(&mut self) -> io::Result<()> {$/;"	f
flush	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/proxy.rs	/^        fn flush(&mut self) -> io::Result<()> {$/;"	f
flush	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/proxy.rs	/^    fn flush(&mut self) -> io::Result<()> {$/;"	f
flush	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/request.rs	/^    fn flush(&mut self) -> io::Result<()> {$/;"	f
flush	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h1.rs	/^    fn flush(&mut self) -> io::Result<()> {$/;"	f
flush	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h2.rs	/^    fn flush(&mut self) -> io::Result<()> {$/;"	f
flush	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/mock.rs	/^    fn flush(&mut self) -> io::Result<()> {$/;"	f
flush	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^        fn flush(&mut self) -> io::Result<()> {$/;"	f
flush	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^    fn flush(&mut self) -> io::Result<()> {$/;"	f
flush	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/server/response.rs	/^    fn flush(&mut self) -> io::Result<()> {$/;"	f
flush	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/response.rs	/^    fn flush(&mut self) -> io::Result<()> {$/;"	f
flush_outgoing	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h1.rs	/^    pub fn flush_outgoing(&mut self) -> ::Result<()> {$/;"	f
fmt	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/mod.rs	/^    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/pool.rs	/^    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/error.rs	/^    fn fmt(&self, _: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/error.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/accept_ranges.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/access_control_allow_credentials.rs	/^    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {$/;"	f
fmt	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/access_control_allow_origin.rs	/^    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {$/;"	f
fmt	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/cache_control.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/connection.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/content_disposition.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/content_length.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/content_range.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/host.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/if_range.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/mod.rs	/^            fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {$/;"	f
fmt	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/prefer.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/range.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/upgrade.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/internals/item.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/mod.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/mod.rs	/^   fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/parsing.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/shared/charset.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/shared/encoding.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/shared/entity.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/shared/httpdate.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/shared/quality_item.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h1.rs	/^    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h2.rs	/^    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> Result<(), ::std::fmt::Error> {$/;"	f
fmt	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h2.rs	/^    fn fmt(&self, fmt: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {$/;"	f
fmt	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/method.rs	/^    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/server/mod.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/status.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/uri.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/version.rs	/^    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/log-0.3.6/src/lib.rs	/^    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/context/hypermedia.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/context/mod.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/context/parameters.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/response.rs	/^    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {$/;"	f
fmt_comma_delimited	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/parsing.rs	/^pub fn fmt_comma_delimited<T: Display>(f: &mut fmt::Formatter, parts: &[T]) -> fmt::Result {$/;"	f
fmt_header	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/benches/client.rs	/^    fn fmt_header(&self, fmt: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt_header	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/access_control_allow_credentials.rs	/^    fn fmt_header(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt_header	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/access_control_allow_origin.rs	/^    fn fmt_header(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt_header	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/authorization.rs	/^    fn fmt_header(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt_header	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/cache_control.rs	/^    fn fmt_header(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt_header	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/content_disposition.rs	/^    fn fmt_header(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt_header	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/content_length.rs	/^    fn fmt_header(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt_header	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/cookie.rs	/^    fn fmt_header(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt_header	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/expect.rs	/^    fn fmt_header(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt_header	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/host.rs	/^    fn fmt_header(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt_header	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/if_range.rs	/^    fn fmt_header(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {$/;"	f
fmt_header	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/mod.rs	/^            fn fmt_header(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {$/;"	f
fmt_header	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/origin.rs	/^    fn fmt_header(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt_header	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/pragma.rs	/^    fn fmt_header(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt_header	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/prefer.rs	/^    fn fmt_header(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt_header	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/preference_applied.rs	/^    fn fmt_header(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt_header	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/range.rs	/^    fn fmt_header(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt_header	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/referrer_policy.rs	/^    fn fmt_header(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt_header	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/set_cookie.rs	/^    fn fmt_header(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt_header	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/strict_transport_security.rs	/^    fn fmt_header(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt_header	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/mod.rs	/^        fn fmt_header(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt_header	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/mod.rs	/^    fn fmt_header(&self, f: &mut fmt::Formatter) -> fmt::Result;$/;"	f
fmt_scheme	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/authorization.rs	/^	fn fmt_scheme(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt_scheme	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/authorization.rs	/^    fn fmt_scheme(&self, &mut fmt::Formatter) -> fmt::Result;$/;"	f
fmt_scheme	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/authorization.rs	/^    fn fmt_scheme(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	f
follow_if	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/mod.rs	/^        fn follow_if(url: &Url) -> bool {$/;"	f
form_url_encoded	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/content_type.rs	/^    pub fn form_url_encoded() -> ContentType {$/;"	f
from	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/mod.rs	/^    fn from(r: &'a mut R) -> Body<'a> {$/;"	f
from	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/pool.rs	/^    fn from(s: &'a str) -> Scheme {$/;"	f
from	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/error.rs	/^    fn from(err: FromUtf8Error) -> Error {$/;"	f
from	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/error.rs	/^    fn from(err: Http2Error) -> Error {$/;"	f
from	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/error.rs	/^    fn from(err: IoError) -> Error {$/;"	f
from	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/error.rs	/^    fn from(err: SslError) -> Error {$/;"	f
from	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/error.rs	/^    fn from(err: Utf8Error) -> Error {$/;"	f
from	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/error.rs	/^    fn from(err: httparse::Error) -> Error {$/;"	f
from	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/error.rs	/^    fn from(err: url::ParseError) -> Error {$/;"	f
from	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/error.rs	/^    macro_rules! from {$/;"	d
from	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h1.rs	/^    fn from(e: EndError<W>) -> io::Error {$/;"	f
from	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h2.rs	/^    fn from(e: io::Error) -> Http2ConnectError { Http2ConnectError(e) }$/;"	f
from	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^    fn from(listener: TcpListener) -> HttpListener {$/;"	f
from	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^    fn from(s: T) -> Box<NetworkStream + Send> {$/;"	f
from	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/context/maybe_utf8.rs	/^    fn from(bytes: Vec<u8>) -> MaybeUtf8<String, Vec<u8>> {$/;"	f
from	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/context/maybe_utf8.rs	/^    fn from(string: &'a str) -> MaybeUtf8<S, V> {$/;"	f
from	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/context/maybe_utf8.rs	/^    fn from(string: String) -> MaybeUtf8<String, V> {$/;"	f
from	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/context/parameters.rs	/^    fn from(map: HashMap<MaybeUtf8Owned, MaybeUtf8Owned>) -> Parameters {$/;"	f
from	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/macros.rs	/^    fn from(s: &'a str) -> MimeHelper<'a, T> {$/;"	f
from	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/macros.rs	/^    fn from(t: Attr) -> MimeHelper<'a, Attr> {$/;"	f
from	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/macros.rs	/^    fn from(t: SubLevel) -> MimeHelper<'a, SubLevel> {$/;"	f
from	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/macros.rs	/^    fn from(t: TopLevel) -> MimeHelper<'a, TopLevel> {$/;"	f
from	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/macros.rs	/^    fn from(t: Value) -> MimeHelper<'a, Value> {$/;"	f
from	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/response.rs	/^    fn from(err: io::Error) -> Error {$/;"	f
from	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/mod.rs	/^    fn from(handler: Option<&'a T>) -> Endpoint<'a, T> {$/;"	f
from	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/mod.rs	/^    fn from(route: &'a R) -> InsertState<'a, R::Segments> {$/;"	f
from	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/mod.rs	/^    fn from(route: &'a R) -> RouteState<'a> {$/;"	f
from	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/tree_router.rs	/^        fn from(s: &'static str) -> TestHandler {$/;"	f
from	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/server/config.rs	/^            fn from(tuple: ($first, $($t),+))-> Global {$/;"	f
from	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/server/config.rs	/^            fn from(tuple: ($ty,)) -> Global {$/;"	f
from	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/server/config.rs	/^    fn from((ip, port): (Ipv4Addr, u16)) -> Host {$/;"	f
from	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/server/config.rs	/^    fn from(_: ()) -> Global {$/;"	f
from	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/server/config.rs	/^    fn from(addr: SocketAddr) -> Host {$/;"	f
from	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/server/config.rs	/^    fn from(addr: SocketAddrV4) -> Host {$/;"	f
from	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/server/config.rs	/^    fn from(addr: SocketAddrV6) -> Host {$/;"	f
from	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/server/config.rs	/^    fn from(data: Box<T>) -> Global {$/;"	f
from	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/server/config.rs	/^    fn from(host: Host) -> SocketAddr {$/;"	f
from	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/server/config.rs	/^    fn from(port: u16) -> Host {$/;"	f
from_and_cause	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/error.rs	/^    macro_rules! from_and_cause {$/;"	d
from_comma_delimited	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/parsing.rs	/^pub fn from_comma_delimited<T: str::FromStr, S: AsRef<[u8]>>(raw: &[S]) -> ::Result<Vec<T>> {$/;"	f
from_cookie_jar	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/cookie.rs	/^    pub fn from_cookie_jar(jar: &CookieJar) -> Cookie {$/;"	f
from_cookie_jar	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/set_cookie.rs	/^    pub fn from_cookie_jar(jar: &CookieJar) -> SetCookie {$/;"	f
from_f32	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/shared/quality_item.rs	/^fn from_f32(f: f32) -> Quality {$/;"	f
from_iter	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/mod.rs	/^    fn from_iter<I: IntoIterator<Item=HeaderView<'a>>>(iter: I) -> Headers {$/;"	f
from_iter	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/context/parameters.rs	/^    fn from_iter<T: IntoIterator<Item=(K, V)>>(iterable: T) -> Parameters {$/;"	f
from_iter	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/tree_router.rs	/^    fn from_iter<I: IntoIterator<Item=(Method, D, T)>>(iterator: I) -> TreeRouter<MethodRouter<Variables<T>>> {$/;"	f
from_one_raw_str	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/parsing.rs	/^pub fn from_one_raw_str<T: str::FromStr>(raw: &[Vec<u8>]) -> ::Result<T> {$/;"	f
from_raw	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/mod.rs	/^    pub fn from_raw(raw: &[httparse::Header]) -> ::Result<Headers> {$/;"	f
from_raw_fd	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^    unsafe fn from_raw_fd(fd: ::std::os::unix::io::RawFd) -> HttpListener {$/;"	f
from_raw_fd	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^    unsafe fn from_raw_fd(fd: ::std::os::unix::io::RawFd) -> HttpStream {$/;"	f
from_raw_socket	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^    unsafe fn from_raw_socket(sock: ::std::os::windows::io::RawSocket) -> HttpListener {$/;"	f
from_raw_socket	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^    unsafe fn from_raw_socket(sock: ::std::os::windows::io::RawSocket) -> HttpStream {$/;"	f
from_raw_str	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/parsing.rs	/^pub fn from_raw_str<T: str::FromStr>(raw: &[u8]) -> ::Result<T> {$/;"	f
from_reader	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/context/body.rs	/^    pub fn from_reader(reader: HttpReader<&'a mut BufReader<&'b mut NetworkStream>>, _headers: &Headers) -> BodyReader<'a, 'b> {$/;"	f
from_reader	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/context/body.rs	/^    pub fn from_reader(reader: HttpReader<&'a mut BufReader<&'b mut NetworkStream>>, headers: &Headers) -> BodyReader<'a, 'b> {$/;"	f
from_str	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/accept_ranges.rs	/^    fn from_str(s: &str) -> ::Result<Self> {$/;"	f
from_str	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/authorization.rs	/^	fn from_str(s: &str) -> ::Result<Bearer> {$/;"	f
from_str	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/authorization.rs	/^    fn from_str(s: &str) -> ::Result<Basic> {$/;"	f
from_str	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/cache_control.rs	/^    fn from_str(s: &str) -> Result<CacheDirective, Option<<u32 as FromStr>::Err>> {$/;"	f
from_str	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/connection.rs	/^    fn from_str(s: &str) -> Result<ConnectionOption, ()> {$/;"	f
from_str	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/content_range.rs	/^    fn from_str(s: &str) -> ::Result<Self> {$/;"	f
from_str	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/host.rs	/^    fn from_str(s: &str) -> ::Result<Host> {$/;"	f
from_str	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/origin.rs	/^    fn from_str(s: &str) -> ::Result<Origin> {$/;"	f
from_str	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/prefer.rs	/^    fn from_str(s: &str) -> Result<Preference, Option<<u32 as FromStr>::Err>> {$/;"	f
from_str	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/range.rs	/^    fn from_str(s: &str) -> ::Result<ByteRangeSpec> {$/;"	f
from_str	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/range.rs	/^    fn from_str(s: &str) -> ::Result<Range> {$/;"	f
from_str	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/strict_transport_security.rs	/^    fn from_str(s: &str) -> ::Result<StrictTransportSecurity> {$/;"	f
from_str	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/upgrade.rs	/^    fn from_str(s: &str) -> Result<Protocol, ()> {$/;"	f
from_str	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/upgrade.rs	/^    fn from_str(s: &str) -> Result<ProtocolName, ()> {$/;"	f
from_str	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/shared/charset.rs	/^    fn from_str(s: &str) -> ::Result<Charset> {$/;"	f
from_str	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/shared/encoding.rs	/^    fn from_str(s: &str) -> ::Result<Encoding> {$/;"	f
from_str	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/shared/entity.rs	/^    fn from_str(s: &str) -> ::Result<EntityTag> {$/;"	f
from_str	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/shared/httpdate.rs	/^    fn from_str(s: &str) -> ::Result<HttpDate> {$/;"	f
from_str	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/shared/quality_item.rs	/^    fn from_str(s: &str) -> ::Result<QualityItem<T>> {$/;"	f
from_str	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/method.rs	/^    fn from_str(s: &str) -> Result<Method, Error> {$/;"	f
from_str	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/uri.rs	/^    fn from_str(s: &str) -> Result<RequestUri, Error> {$/;"	f
from_str	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/log-0.3.6/src/lib.rs	/^    fn from_str(level: &str) -> Result<LogLevel, ()> {$/;"	f
from_str	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/log-0.3.6/src/lib.rs	/^    fn from_str(level: &str) -> Result<LogLevelFilter, ()> {$/;"	f
from_str	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/server/config.rs	/^    fn from_str(s: &str) -> Result<Host, Self::Err> {$/;"	f
from_tuple	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/server/config.rs	/^macro_rules! from_tuple {$/;"	d
from_u16	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/status.rs	/^    pub fn from_u16(n: u16) -> StatusCode {$/;"	f
from_usize	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/log-0.3.6/src/lib.rs	/^    fn from_usize(u: usize) -> Option<LogLevel> {$/;"	f
from_usize	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/log-0.3.6/src/lib.rs	/^    fn from_usize(u: usize) -> Option<LogLevelFilter> {$/;"	f
fuse	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/mod.rs	/^    pub fn fuse(&mut self) {$/;"	f
gen	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/build/mime.rs	/^pub fn gen() {$/;"	f
get	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/mod.rs	/^    pub fn get<U: IntoUrl>(&self, url: U) -> RequestBuilder {$/;"	f
get	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/internals/cell.rs	/^    pub fn get(&self, key: TypeId) -> Option<&V> {$/;"	f
get	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/mod.rs	/^    pub fn get<H: Header + HeaderFormat>(&self) -> Option<&H> {$/;"	f
get	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/log-0.3.6/src/lib.rs	/^    pub fn get(&self) -> LogLevelFilter {$/;"	f
get	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/context/parameters.rs	/^    pub fn get<'a, K: ?Sized>(&'a self, key: &K) -> Option<Cow<'a, str>> where$/;"	f
get	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/mod.rs	/^    pub fn get(&self) -> Option<&'a [u8]> {$/;"	f
get	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/server/config.rs	/^    pub fn get<T: Any + Send + Sync>(&self) -> Option<&T> {$/;"	f
get_buf	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/buffer.rs	/^    pub fn get_buf(&self) -> &[u8] {$/;"	f
get_host_and_port	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/mod.rs	/^fn get_host_and_port(url: &Url) -> ::Result<(&str, u16)> {$/;"	f
get_incoming	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h1.rs	/^    fn get_incoming(&mut self) -> ::Result<ResponseHead> {$/;"	f
get_incoming	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h2.rs	/^    fn get_incoming(&mut self) -> ::Result<ResponseHead> {$/;"	f
get_incoming	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/message.rs	/^    fn get_incoming(&mut self) -> ::Result<ResponseHead>;$/;"	f
get_mut	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/buffer.rs	/^    pub fn get_mut(&mut self) -> &mut R { &mut self.inner }$/;"	f
get_mut	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/internals/cell.rs	/^    pub fn get_mut(&mut self, key: TypeId) -> Option<&mut V> {$/;"	f
get_mut	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/internals/cell.rs	/^    pub unsafe fn get_mut(&mut self) -> &mut T {$/;"	f
get_mut	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/mod.rs	/^    pub fn get_mut<H: Header + HeaderFormat>(&mut self) -> Option<&mut H> {$/;"	f
get_mut	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h1.rs	/^    pub fn get_mut(&mut self) -> &mut (NetworkStream + Send) {$/;"	f
get_mut	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h1.rs	/^    pub fn get_mut(&mut self) -> &mut R {$/;"	f
get_mut	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h1.rs	/^    pub fn get_mut(&mut self) -> &mut W {$/;"	f
get_mut	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/context/parameters.rs	/^    pub fn get_mut<'a, K: ?Sized>(&'a mut self, key: &K) -> Option<&'a mut MaybeUtf8Owned> where$/;"	f
get_raw	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/mod.rs	/^    pub fn get_raw(&self, name: &str) -> Option<&[Vec<u8>]> {$/;"	f
get_raw	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/context/parameters.rs	/^    pub fn get_raw<'a, K: ?Sized>(&'a self, key: &K) -> Option<&'a MaybeUtf8Owned> where$/;"	f
get_ref	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/buffer.rs	/^    pub fn get_ref(&self) -> &R { &self.inner }$/;"	f
get_ref	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h1.rs	/^    pub fn get_ref(&self) -> &(NetworkStream + Send) {$/;"	f
get_ref	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h1.rs	/^    pub fn get_ref(&self) -> &R {$/;"	f
get_ref	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h1.rs	/^    pub fn get_ref(&self) -> &W {$/;"	f
go_to	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/mod.rs	/^    pub fn go_to(&mut self, snapshot: (usize, usize)) {$/;"	f
grow_zerofill	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/buffer.rs	/^unsafe fn grow_zerofill(buf: &mut Vec<u8>, additional: usize) {$/;"	f
handle	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/server/mod.rs	/^            fn handle<'a, 'k>(&'a self, _: Request<'a, 'k>, res: Response<'a, Fresh>) {$/;"	f
handle	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/server/mod.rs	/^        fn handle(_: Request, res: Response<Fresh>) {$/;"	f
handle	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/server/mod.rs	/^    fn handle<'a, 'k>(&'a self, Request<'a, 'k>, Response<'a, Fresh>);$/;"	f
handle	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/server/mod.rs	/^    fn handle<'a, 'k>(&'a self, req: Request<'a, 'k>, res: Response<'a, Fresh>) {$/;"	f
handle	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/server/mod.rs	/^    pub fn handle<H: Handler + 'static>(self, handler: H) -> ::Result<Listening> {$/;"	f
handle	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/server/mod.rs	/^fn handle<H, L>(mut server: Server<L>, handler: H, threads: usize) -> ::Result<Listening>$/;"	f
handle	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/server/instance.rs	/^    fn handle(&self, request: hyper::server::request::Request, writer: hyper::server::response::Response) {$/;"	f
handle_client	/home/kibbles/Projects/rust/tin_can_telephone/src/tcp_example.rs	/^fn handle_client(mut stream: TcpStream) {$/;"	f
handle_connection	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/server/mod.rs	/^    fn handle_connection<S>(&self, mut stream: &mut S) where S: NetworkStream + Clone {$/;"	f
handle_expect	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/server/mod.rs	/^    fn handle_expect<W: Write>(&self, req: &Request, wrt: &mut W) -> bool {$/;"	f
handle_request	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/handler.rs	/^    fn handle_request(&self, context: Context, response: Response) {$/;"	f
handle_request	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/handler.rs	/^    fn handle_request(&self, context: Context, response: Response);$/;"	f
handle_request	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/tree_router.rs	/^        fn handle_request(&self, _: Context, _: Response) {}$/;"	f
handle_request	/home/kibbles/Projects/rust/tin_can_telephone/src/example.rs	/^    fn handle_request(&self, context: Context, response: Response) {$/;"	f
handle_threads	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/server/mod.rs	/^    pub fn handle_threads<H: Handler + 'static>(self, handler: H,$/;"	f
has	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/mod.rs	/^    pub fn has<H: Header + HeaderFormat>(&self) -> bool {$/;"	f
has_body	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h1.rs	/^    fn has_body(&self) -> bool {$/;"	f
has_body	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h2.rs	/^    fn has_body(&self) -> bool {$/;"	f
has_body	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/message.rs	/^    fn has_body(&self) -> bool;$/;"	f
hash	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/context/maybe_utf8.rs	/^    fn hash<H: Hasher>(&self, hasher: &mut H) {$/;"	f
head	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/mod.rs	/^    pub fn head<U: IntoUrl>(&self, url: U) -> RequestBuilder {$/;"	f
header	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/mod.rs	/^    pub fn header<H: Header + HeaderFormat>(mut self, header: H) -> RequestBuilder<'a> {$/;"	f
header	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/mod.rs	/^macro_rules! header {$/;"	d
header_name	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/benches/client.rs	/^    fn header_name() -> &'static str {$/;"	f
header_name	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/access_control_allow_credentials.rs	/^    fn header_name() -> &'static str {$/;"	f
header_name	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/access_control_allow_origin.rs	/^    fn header_name() -> &'static str {$/;"	f
header_name	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/authorization.rs	/^    fn header_name() -> &'static str {$/;"	f
header_name	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/cache_control.rs	/^    fn header_name() -> &'static str {$/;"	f
header_name	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/content_disposition.rs	/^    fn header_name() -> &'static str {$/;"	f
header_name	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/content_length.rs	/^    fn header_name() -> &'static str {$/;"	f
header_name	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/cookie.rs	/^    fn header_name() -> &'static str {$/;"	f
header_name	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/expect.rs	/^    fn header_name() -> &'static str {$/;"	f
header_name	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/host.rs	/^    fn header_name() -> &'static str {$/;"	f
header_name	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/if_range.rs	/^    fn header_name() -> &'static str {$/;"	f
header_name	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/mod.rs	/^            fn header_name() -> &'static str {$/;"	f
header_name	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/origin.rs	/^    fn header_name() -> &'static str {$/;"	f
header_name	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/pragma.rs	/^    fn header_name() -> &'static str {$/;"	f
header_name	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/prefer.rs	/^    fn header_name() -> &'static str {$/;"	f
header_name	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/preference_applied.rs	/^    fn header_name() -> &'static str {$/;"	f
header_name	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/range.rs	/^    fn header_name() -> &'static str {$/;"	f
header_name	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/referrer_policy.rs	/^    fn header_name() -> &'static str {$/;"	f
header_name	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/set_cookie.rs	/^    fn header_name() -> &'static str {$/;"	f
header_name	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/strict_transport_security.rs	/^    fn header_name() -> &'static str {$/;"	f
header_name	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/mod.rs	/^        fn header_name() -> &'static str {$/;"	f
header_name	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/mod.rs	/^    fn header_name() -> &'static str;$/;"	f
header_name	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/mod.rs	/^fn header_name<T: Header>() -> &'static str {$/;"	f
headers	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/mod.rs	/^    pub fn headers(mut self, headers: Headers) -> RequestBuilder<'a> {$/;"	f
headers	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/request.rs	/^    pub fn headers(&self) -> &Headers { &self.headers }$/;"	f
headers	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/server/response.rs	/^    pub fn headers(&self) -> &header::Headers { &*self.headers }$/;"	f
headers	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/response.rs	/^    pub fn headers(&self) -> &Headers {$/;"	f
headers_mut	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/request.rs	/^    pub fn headers_mut(&mut self) -> &mut Headers { &mut self.headers }$/;"	f
headers_mut	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/server/response.rs	/^    pub fn headers_mut(&mut self) -> &mut header::Headers { self.headers }$/;"	f
headers_mut	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/response.rs	/^    pub fn headers_mut(&mut self) -> &mut Headers {$/;"	f
hello	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/examples/hello.rs	/^fn hello(_: Request, res: Response) {$/;"	f
html	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/content_type.rs	/^    pub fn html() -> ContentType {$/;"	f
http	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/server/mod.rs	/^    pub fn http<To: ToSocketAddrs>(addr: To) -> ::Result<Server<HttpListener>> {$/;"	f
http	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/server/instance.rs	/^    fn http(host: SocketAddr) -> HttpResult<HyperServer> {$/;"	f
http_methods	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/tree_router.rs	/^    fn http_methods() {$/;"	f
https	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/server/mod.rs	/^    pub fn https<A: ToSocketAddrs>(addr: A, ssl: S) -> ::Result<Server<HttpsListener<S>>> {$/;"	f
https	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/server/instance.rs	/^    fn https(host: SocketAddr, cert: PathBuf, key: PathBuf) -> HttpResult<HyperServer> {$/;"	f
hyperlinks	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/method_router.rs	/^    fn hyperlinks<'a>(&'a self, base: Link<'a>) -> Vec<Link<'a>> {$/;"	f
hyperlinks	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/mod.rs	/^    fn hyperlinks<'a>(&'a self, base: Link<'a>) -> Vec<Link<'a>> {$/;"	f
hyperlinks	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/mod.rs	/^    fn hyperlinks<'a>(&'a self, base: Link<'a>) -> Vec<Link<'a>>;$/;"	f
hyperlinks	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/mod.rs	/^    fn hyperlinks<'a>(&'a self, mut base: Link<'a>) -> Vec<Link<'a>> {$/;"	f
hyperlinks	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/or_else.rs	/^    fn hyperlinks<'a>(&'a self, base: Link<'a>) -> Vec<Link<'a>> {$/;"	f
hyperlinks	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/tree_router.rs	/^    fn hyperlinks<'a>(&'a self, base: Link<'a>) -> Vec<Link<'a>> {$/;"	f
hyperlinks	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/variables.rs	/^    fn hyperlinks<'a>(&'a self, mut base: Link<'a>) -> Vec<Link<'a>> {$/;"	f
idempotent	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/method.rs	/^    pub fn idempotent(&self) -> bool {$/;"	f
ignore_send_error	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/response.rs	/^    pub fn ignore_send_error(self) -> Result<(), (io::Error, Response<'a, 'b>)> {$/;"	f
including_subdomains	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/strict_transport_security.rs	/^    pub fn including_subdomains(max_age: u64) -> StrictTransportSecurity {$/;"	f
incoming	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^    fn incoming(&mut self) -> NetworkConnections<Self> {$/;"	f
index_of	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/mod.rs	/^    fn index_of(slice: &[u8], byte: u8) -> Option<usize> {$/;"	f
info	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/log-0.3.6/src/macros.rs	/^macro_rules! info {$/;"	d
inner	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h1.rs	/^        fn inner<W: Write>(w: &mut W) -> io::Result<()> {$/;"	f
insert	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/internals/cell.rs	/^    pub unsafe fn insert(&self, key: TypeId, val: Box<V>) {$/;"	f
insert	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/context/parameters.rs	/^    pub fn insert<K, V>(&mut self, key: K, value: V) -> Option<MaybeUtf8Owned> where$/;"	f
insert	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/method_router.rs	/^    fn insert<'a, R: Into<InsertState<'a, I>>, I: Iterator<Item = &'a [u8]>>(&mut self, method: Method, route: R, item: Self::Handler) {$/;"	f
insert	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/mod.rs	/^    fn insert<'a, R: Into<InsertState<'a, I>>, I: Iterator<Item = &'a [u8]>>(&mut self, _method: Method, _route: R, item: H) {$/;"	f
insert	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/mod.rs	/^    fn insert<'a, R: Into<InsertState<'a, I>>, I: Iterator<Item = &'a [u8]>>(&mut self, method: Method, route: R, item: Self::Handler) {$/;"	f
insert	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/mod.rs	/^    fn insert<'a, R: Into<InsertState<'a, I>>, I: Iterator<Item = &'a [u8]>>(&mut self, method: Method, route: R, item: Self::Handler);$/;"	f
insert	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/or_else.rs	/^    fn insert<'a, R: Into<InsertState<'a, I>>, I: Iterator<Item = &'a [u8]>>(&mut self, method: Method, route: R, item: H) {$/;"	f
insert	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/tree_router.rs	/^    fn insert<'a, R: Into<InsertState<'a, I>>, I: Iterator<Item = &'a [u8]>>(&mut self, method: Method, route: R, item: Self::Handler) {$/;"	f
insert	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/variables.rs	/^    fn insert<'a, R: Into<InsertState<'a, I>>, I: Iterator<Item = &'a [u8]>>(&mut self, _method: Method, route: R, item: Self::Handler) {$/;"	f
insert	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/server/config.rs	/^    pub fn insert<T: Any + Send + Sync>(&mut self, value: T) -> Option<T> {$/;"	f
insert_router	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/method_router.rs	/^    fn insert_router<'a, R: Into<InsertState<'a, I>>, I: Clone + Iterator<Item = &'a [u8]>>(&mut self, route: R, router: MethodRouter<T>) {$/;"	f
insert_router	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/mod.rs	/^    fn insert_router<'a, R: Into<InsertState<'a, I>>, I: Clone + Iterator<Item = &'a [u8]>>(&mut self, _route: R, router: H) {$/;"	f
insert_router	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/mod.rs	/^    fn insert_router<'a, R: Into<InsertState<'a, I>>, I: Clone + Iterator<Item = &'a [u8]>>(&mut self, route: R, router: Option<T>) {$/;"	f
insert_router	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/mod.rs	/^    fn insert_router<'a, R: Into<InsertState<'a, I>>, I: Clone + Iterator<Item = &'a [u8]>>(&mut self, route: R, router: Self);$/;"	f
insert_router	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/or_else.rs	/^    fn insert_router<'a, R: Into<InsertState<'a, I>>, I: Clone + Iterator<Item = &'a [u8]>>(&mut self, route: R, router: OrElse<Inner, H>) {$/;"	f
insert_router	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/tree_router.rs	/^    fn insert_router<'a, R: Into<InsertState<'a, I>>, I: Clone + Iterator<Item = &'a [u8]>>(&mut self, route: R, router: TreeRouter<T>) {$/;"	f
insert_router	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/variables.rs	/^    fn insert_router<'a, R: Into<InsertState<'a, I>>, I: Clone + Iterator<Item = &'a [u8]>>(&mut self, route: R, mut router: Variables<H>) {$/;"	f
insert_routes	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/macros.rs	/^macro_rules! insert_routes {$/;"	d
inspect	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/lib.rs	/^macro_rules! inspect($/;"	d
into	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/mod.rs	/^    fn into(self) -> Body<'a> {$/;"	f
into	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/context/maybe_utf8.rs	/^    fn into(self) -> String {$/;"	f
into	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/context/maybe_utf8.rs	/^    fn into(self) -> Vec<u8> {$/;"	f
into	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/context/parameters.rs	/^    fn into(self) -> HashMap<MaybeUtf8Owned, MaybeUtf8Owned> {$/;"	f
into	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/file.rs	/^    fn into(self) -> SubLevel {$/;"	f
into	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/file.rs	/^    fn into(self) -> TopLevel {$/;"	f
into	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/response.rs	/^    fn into(self) -> Data<'a> {$/;"	f
into	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/response.rs	/^    fn into(self) -> io::Error {$/;"	f
into_bytes	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/response.rs	/^    pub fn into_bytes(self) -> Vec<u8> {$/;"	f
into_chunked	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/response.rs	/^    pub fn into_chunked(mut self) -> Chunked<'a, 'b> {$/;"	f
into_inner	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/buffer.rs	/^    pub fn into_inner(self) -> R { self.inner }$/;"	f
into_inner	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/pool.rs	/^    pub fn into_inner(mut self) -> S {$/;"	f
into_inner	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h1.rs	/^    pub fn into_inner(self) -> Box<NetworkStream + Send> {$/;"	f
into_inner	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h1.rs	/^    pub fn into_inner(self) -> R {$/;"	f
into_inner	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h1.rs	/^    pub fn into_inner(self) -> T { self.obj.unwrap() }$/;"	f
into_inner	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h1.rs	/^    pub fn into_inner(self) -> W {$/;"	f
into_iter	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/context/parameters.rs	/^    fn into_iter(self) -> Self::IntoIter {$/;"	f
into_normal	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/proxy.rs	/^    pub fn into_normal(self) -> Result<T1, Self> {$/;"	f
into_raw	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/response.rs	/^    pub unsafe fn into_raw(mut self, content_length: u64) -> Raw<'a> {$/;"	f
into_string	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/response.rs	/^    pub fn into_string(self) -> Result<String, FromUtf8Error> {$/;"	f
into_tunneled	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/proxy.rs	/^    pub fn into_tunneled(self) -> Result<T2, Self> {$/;"	f
into_url	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/mod.rs	/^    fn into_url(self) -> Result<Url, UrlError> {$/;"	f
into_url	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/mod.rs	/^    fn into_url(self) -> Result<Url, UrlError>;$/;"	f
is	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/mod.rs	/^    pub fn is<H: Header>(&self) -> bool {$/;"	f
is	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/message.rs	/^    pub fn is<T: Any>(&self) -> bool {$/;"	f
is	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^    pub fn is<T: Any>(&self) -> bool {$/;"	f
is_asterisk	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/context/mod.rs	/^    pub fn is_asterisk(&self) -> bool {$/;"	f
is_client_error	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/status.rs	/^    pub fn is_client_error(&self) -> bool {$/;"	f
is_empty	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/mod.rs	/^    pub fn is_empty(&mut self) -> bool {$/;"	f
is_empty	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/mod.rs	/^    pub fn is_empty(&self) -> bool {$/;"	f
is_informational	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/status.rs	/^    pub fn is_informational(&self) -> bool {$/;"	f
is_path	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/context/mod.rs	/^    pub fn is_path(&self) -> bool {$/;"	f
is_redirection	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/status.rs	/^    pub fn is_redirection(&self) -> bool {$/;"	f
is_server_error	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/status.rs	/^    pub fn is_server_error(&self) -> bool {$/;"	f
is_slash	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/mod.rs	/^fn is_slash(c: &u8) -> bool {$/;"	f
is_strange_status	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/status.rs	/^    pub fn is_strange_status(&self) -> bool {$/;"	f
is_success	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/status.rs	/^    pub fn is_success(&self) -> bool {$/;"	f
is_utf8	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/context/maybe_utf8.rs	/^    pub fn is_utf8(&self) -> bool {$/;"	f
iter	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/mod.rs	/^    pub fn iter(&self) -> HeadersItems {$/;"	f
jpeg	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/content_type.rs	/^    pub fn jpeg() -> ContentType {$/;"	f
json	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/content_type.rs	/^    pub fn json() -> ContentType {$/;"	f
keep	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/mod.rs	/^    pub fn keep(&mut self) {$/;"	f
keep_alive	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/connection.rs	/^    pub fn keep_alive() -> Connection {$/;"	f
keep_alive	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/server/mod.rs	/^    pub fn keep_alive(&mut self, timeout: Option<Duration>) {$/;"	f
keep_alive	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/server/instance.rs	/^    fn keep_alive(&mut self, timeout: Option<Duration>) {$/;"	f
keep_alive_loop	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/server/mod.rs	/^    fn keep_alive_loop<W: Write>(&self, mut rdr: &mut BufReader<&mut NetworkStream>,$/;"	f
key	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/pool.rs	/^fn key<T: Into<Scheme>>(host: &str, port: u16, scheme: T) -> Key {$/;"	f
last	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/log-0.3.6/tests/filters.rs	/^fn last(state: &State, expected: Option<LogLevel>) {$/;"	f
len	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/mod.rs	/^    pub fn len(&self) -> usize {$/;"	f
level	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/log-0.3.6/src/lib.rs	/^    pub fn level(&self) -> LogLevel {$/;"	f
line	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/log-0.3.6/src/lib.rs	/^    pub fn line(&self) -> u32 {$/;"	f
lines	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/server/response.rs	/^    macro_rules! lines {$/;"	d
link	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/tree_router.rs	/^    macro_rules! link {$/;"	d
local_addr	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^    fn local_addr(&mut self) -> io::Result<SocketAddr> {$/;"	f
local_addr	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^    fn local_addr(&mut self) -> io::Result<SocketAddr>;$/;"	f
location	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/log-0.3.6/src/lib.rs	/^    pub fn location(&self) -> &LogLocation {$/;"	f
log	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/log-0.3.6/src/lib.rs	/^    fn log(&self, _: &LogRecord) {}$/;"	f
log	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/log-0.3.6/src/lib.rs	/^    fn log(&self, record: &LogRecord);$/;"	f
log	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/log-0.3.6/src/lib.rs	/^    pub fn log(info: &PanicInfo) {$/;"	f
log	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/log-0.3.6/src/macros.rs	/^macro_rules! log {$/;"	d
log	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/log-0.3.6/tests/filters.rs	/^    fn log(&self, record: &LogRecord) {$/;"	f
log_enabled	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/log-0.3.6/src/macros.rs	/^macro_rules! log_enabled {$/;"	d
log_panics	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/log-0.3.6/src/lib.rs	/^pub fn log_panics() {$/;"	f
logger	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/log-0.3.6/src/lib.rs	/^fn logger() -> Option<LoggerGuard> {$/;"	f
main	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/examples/client.rs	/^fn main() {$/;"	f
main	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/examples/client_http2.rs	/^fn main() {$/;"	f
main	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/examples/headers.rs	/^fn main() {$/;"	f
main	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/examples/hello.rs	/^fn main() {$/;"	f
main	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/examples/server.rs	/^fn main() {$/;"	f
main	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/log-0.3.6/tests/filters.rs	/^fn main() {$/;"	f
main	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/build/main.rs	/^fn main() {$/;"	f
main	/home/kibbles/Projects/rust/tin_can_telephone/src/main.rs	/^fn main() {$/;"	f
map	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/tree_router.rs	/^    macro_rules! map {$/;"	d
map_in_place	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h1.rs	/^    pub fn map_in_place<F>(&mut self, f: F) where F: FnOnce(T) -> T {$/;"	f
max	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/log-0.3.6/src/lib.rs	/^    pub fn max() -> LogLevel {$/;"	f
max	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/log-0.3.6/src/lib.rs	/^    pub fn max() -> LogLevelFilter {$/;"	f
max_log_level	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/log-0.3.6/src/lib.rs	/^pub fn max_log_level() -> LogLevelFilter {$/;"	f
maybe_reserve	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/buffer.rs	/^    fn maybe_reserve(&mut self) {$/;"	f
merge	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/mod.rs	/^    fn merge(&mut self, other: Self) where Self: Sized {$/;"	f
merge_router	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/tree_router.rs	/^    fn merge_router<'a, I: Iterator<Item = &'a [u8]> + Clone>(&mut self, state: InsertState<'a, I>, router: TreeRouter<T>) {$/;"	f
merge_routers	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/tree_router.rs	/^    fn merge_routers() {$/;"	f
merge_routers_variables	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/tree_router.rs	/^    fn merge_routers_variables() {$/;"	f
merge_routers_wildcard	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/tree_router.rs	/^    fn merge_routers_wildcard() {$/;"	f
metadata	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/log-0.3.6/src/lib.rs	/^    pub fn metadata(&self) -> &LogMetadata {$/;"	f
method	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/request.rs	/^    pub fn method(&self) -> Method { self.method.clone() }$/;"	f
mime	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/lib.rs	/^pub mod mime {$/;"	m
mock_connector	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/mock.rs	/^macro_rules! mock_connector ($/;"	d
mocked	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/pool.rs	/^    macro_rules! mocked {$/;"	d
modify	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/filter.rs	/^    fn modify(&self, context: FilterContext, request_context: &mut Context) -> ContextAction;$/;"	f
modify_context	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/server/instance.rs	/^    fn modify_context(&self, filter_storage: &mut AnyMap, context: &mut Context) -> ContextAction {$/;"	f
module_path	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/log-0.3.6/src/lib.rs	/^    pub fn module_path(&self) -> &str {$/;"	f
multipart_boundary	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/context/body.rs	/^    fn multipart_boundary(&self) -> Option<&str> {$/;"	f
mut	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/log-0.3.6/src/lib.rs	/^static mut LOGGER: *const Log = &NopLogger;$/;"	c
mut_raw	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/internals/item.rs	/^    pub fn mut_raw(&mut self) -> &mut Vec<Vec<u8>> {$/;"	f
name	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/mod.rs	/^    pub fn name(&self) -> &'a str {$/;"	f
name	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/shared/charset.rs	/^    fn name(&self) -> &str {$/;"	f
new	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/benches/client.rs	/^    fn new() -> MockStream {$/;"	f
new	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/buffer.rs	/^    pub fn new(rdr: R) -> BufReader<R> {$/;"	f
new	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/mod.rs	/^    pub fn new() -> Client {$/;"	f
new	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/pool.rs	/^    pub fn new(config: Config) -> Pool<DefaultConnector> {$/;"	f
new	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/request.rs	/^    pub fn new(method: Method, url: Url) -> ::Result<Request<Fresh>> {$/;"	f
new	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/response.rs	/^    pub fn new(url: Url, stream: Box<NetworkStream + Send>) -> ::Result<Response> {$/;"	f
new	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/origin.rs	/^    pub fn new<S: Into<String>, H: Into<String>>(scheme: S, hostname: H, port: Option<u16>) -> Origin{$/;"	f
new	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/upgrade.rs	/^    pub fn new(name: ProtocolName, version: Option<String>) -> Protocol {$/;"	f
new	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/internals/cell.rs	/^    pub fn new() -> PtrMapCell<V> {$/;"	f
new	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/internals/cell.rs	/^    pub fn new(val: Option<T>) -> OptCell<T> {$/;"	f
new	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/mod.rs	/^    pub fn new() -> Headers {$/;"	f
new	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/shared/entity.rs	/^    pub fn new(weak: bool, tag: String) -> EntityTag {$/;"	f
new	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/shared/quality_item.rs	/^    pub fn new(item: T, quality: Quality) -> QualityItem<T> {$/;"	f
new	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h1.rs	/^    fn new(stream: Box<NetworkStream + Send>) -> Stream {$/;"	f
new	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h1.rs	/^    pub fn new(obj: T) -> Wrapper<T> {$/;"	f
new	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/mock.rs	/^    pub fn new() -> MockHttp2Connector {$/;"	f
new	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/mock.rs	/^    pub fn new() -> MockStream {$/;"	f
new	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^        pub fn new(builder: ClientBuilder) -> ClientWrapper {$/;"	f
new	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^        pub fn new(builder: ServerBuilder) -> ServerWrapper {$/;"	f
new	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^        pub fn new(ctx: SslContext) -> OpensslClient {$/;"	f
new	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^    pub fn new(s: S) -> HttpsConnector<S, HttpConnector> {$/;"	f
new	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^    pub fn new<To: ToSocketAddrs>(addr: To) -> ::Result<HttpListener> {$/;"	f
new	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^    pub fn new<To: ToSocketAddrs>(addr: To, ssl: S) -> ::Result<HttpsListener<S>> {$/;"	f
new	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/server/listener.rs	/^    fn new(channel: mpsc::Sender<T>, data: T) -> Sentinel<T> {$/;"	f
new	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/server/listener.rs	/^    pub fn new(acceptor: A) -> ListenerPool<A> {$/;"	f
new	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/server/mod.rs	/^    fn new(handler: H, timeouts: Timeouts) -> Worker<H> {$/;"	f
new	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/server/mod.rs	/^    pub fn new(listener: L) -> Server<L> {$/;"	f
new	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/server/request.rs	/^    pub fn new(mut stream: &'a mut BufReader<&'b mut NetworkStream>, addr: SocketAddr)$/;"	f
new	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/server/response.rs	/^    pub fn new(stream: &'a mut (Write + 'a), headers: &'a mut header::Headers) ->$/;"	f
new	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/context/maybe_utf8.rs	/^    pub fn new() -> MaybeUtf8<S, V> where S: From<&'static str> {$/;"	f
new	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/context/parameters.rs	/^    pub fn new() -> Parameters {$/;"	f
new	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/response.rs	/^    pub fn new($/;"	f
new	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/mod.rs	/^    fn new(names: &'a [MaybeUtf8Owned], iter: I) -> VariableIter<'a, I> {$/;"	f
new	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/or_else.rs	/^    pub fn new(inner: R, default: H) -> OrElse<R, H> {$/;"	f
new	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/tree_router.rs	/^    pub fn new() -> TreeRouter<MethodRouter<Variables<H>>> {$/;"	f
new	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/server/instance.rs	/^    pub fn new(config: Server<R>) -> (ServerInstance<R>, Scheme) {$/;"	f
new	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/server/mod.rs	/^    pub fn new(handlers: R) -> Server<R> {$/;"	f
new_client	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h2.rs	/^    fn new_client(&self, stream: S, host: String, scheme: HttpScheme)$/;"	f
new_http2_response	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/mock.rs	/^    pub fn new_http2_response(status: &[u8], headers: &Headers, body: Option<Vec<u8>>)$/;"	f
new_message	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h1.rs	/^    fn new_message(&self, host: &str, port: u16, scheme: &str) -> ::Result<Box<HttpMessage>> {$/;"	f
new_message	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h2.rs	/^    fn new_message(&self, host: &str, port: u16, scheme: &str) -> ::Result<Box<HttpMessage>> {$/;"	f
new_message	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/message.rs	/^    fn new_message(&self, host: &str, port: u16, scheme: &str) -> ::Result<Box<HttpMessage>>;$/;"	f
new_protocol	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h2.rs	/^pub fn new_protocol() -> Http2Protocol<HttpConnector, HttpStream> {$/;"	f
new_raw	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/internals/item.rs	/^    pub fn new_raw(data: Vec<Vec<u8>>) -> Item {$/;"	f
new_response_stream	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/mock.rs	/^    pub fn new_response_stream(&mut self, status: &[u8], headers: &Headers, body: Option<Vec<u8>>)$/;"	f
new_typed	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/internals/item.rs	/^    pub fn new_typed(ty: Box<HeaderFormat + Send + Sync>) -> Item {$/;"	f
next	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/mod.rs	/^    fn next(&mut self) -> Option<HeaderView<'a>> {$/;"	f
next	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^    fn next(&mut self) -> Option<::Result<N::Stream>> {$/;"	f
next	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/filter.rs	/^    pub fn next() -> ContextAction {$/;"	f
next	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/filter.rs	/^    pub fn next<T: Into<Data<'a>>>(data: Option<T>) -> ResponseAction<'a> {$/;"	f
next	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/mod.rs	/^    fn next(&mut self) -> Option<&'a [u8]> {$/;"	f
next	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/mod.rs	/^    fn next(&mut self) -> Option<<Self as Iterator>::Item> {$/;"	f
next	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/mod.rs	/^    fn next(&mut self) -> Option<Self::Item> {$/;"	f
no_ssl	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/proxy.rs	/^mod no_ssl {$/;"	m
ok_or	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/log-0.3.6/src/lib.rs	/^fn ok_or<T, E>(t: Option<T>, e: E) -> Result<T, E> {$/;"	f
on_connection_end	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/server/mod.rs	/^    fn on_connection_end(&self) { }$/;"	f
on_connection_end	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/server/instance.rs	/^    fn on_connection_end(&self) {$/;"	f
on_connection_start	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/server/mod.rs	/^    fn on_connection_start(&self) { }$/;"	f
on_connection_start	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/server/instance.rs	/^    fn on_connection_start(&self) {$/;"	f
one	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/internals/cell.rs	/^    pub unsafe fn one(&self) -> &V {$/;"	f
one_static_route	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/tree_router.rs	/^    fn one_static_route() {$/;"	f
one_universal_wildcard_route	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/tree_router.rs	/^    fn one_universal_wildcard_route() {$/;"	f
one_variable_route	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/tree_router.rs	/^    fn one_variable_route() {$/;"	f
one_wildcard_end_route	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/tree_router.rs	/^    fn one_wildcard_end_route() {$/;"	f
one_wildcard_middle_route	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/tree_router.rs	/^    fn one_wildcard_middle_route() {$/;"	f
openssl	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^mod openssl {$/;"	m
or_continue	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/build/mime.rs	/^macro_rules! or_continue {$/;"	d
panic	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/log-0.3.6/src/lib.rs	/^mod panic {$/;"	m
parse	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/internals/item.rs	/^fn parse<H: Header + HeaderFormat>(raw: &Vec<Vec<u8>>) ->$/;"	f
parse	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h1.rs	/^fn parse<R: Read, T: TryParse<Subject=I>, I>(rdr: &mut BufReader<R>) -> ::Result<Incoming<I>> {$/;"	f
parse	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/context/parameters.rs	/^    pub fn parse<K: ?Sized, T>(&self, key: &K) -> Result<T, Option<T::Err>> where$/;"	f
parse_extended_value	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/parsing.rs	/^pub fn parse_extended_value(val: &str) -> ::Result<ExtendedValue> {$/;"	f
parse_fragment	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/server/instance.rs	/^fn parse_fragment(path: &str) -> (&str, Option<&str>) {$/;"	f
parse_header	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/benches/client.rs	/^    fn parse_header(_: &[Vec<u8>]) -> hyper::Result<Foo> {$/;"	f
parse_header	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/access_control_allow_credentials.rs	/^    fn parse_header(raw: &[Vec<u8>]) -> ::Result<AccessControlAllowCredentials> {$/;"	f
parse_header	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/access_control_allow_origin.rs	/^    fn parse_header(raw: &[Vec<u8>]) -> ::Result<AccessControlAllowOrigin> {$/;"	f
parse_header	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/authorization.rs	/^    fn parse_header(raw: &[Vec<u8>]) -> ::Result<Authorization<S>> {$/;"	f
parse_header	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/cache_control.rs	/^    fn parse_header(raw: &[Vec<u8>]) -> ::Result<CacheControl> {$/;"	f
parse_header	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/content_disposition.rs	/^    fn parse_header(raw: &[Vec<u8>]) -> ::Result<ContentDisposition> {$/;"	f
parse_header	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/content_length.rs	/^    fn parse_header(raw: &[Vec<u8>]) -> ::Result<ContentLength> {$/;"	f
parse_header	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/cookie.rs	/^    fn parse_header(raw: &[Vec<u8>]) -> ::Result<Cookie> {$/;"	f
parse_header	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/expect.rs	/^    fn parse_header(raw: &[Vec<u8>]) -> ::Result<Expect> {$/;"	f
parse_header	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/host.rs	/^    fn parse_header(raw: &[Vec<u8>]) -> ::Result<Host> {$/;"	f
parse_header	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/if_range.rs	/^    fn parse_header(raw: &[Vec<u8>]) -> ::Result<IfRange> {$/;"	f
parse_header	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/mod.rs	/^            fn parse_header(raw: &[Vec<u8>]) -> $crate::Result<Self> {$/;"	f
parse_header	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/origin.rs	/^    fn parse_header(raw: &[Vec<u8>]) -> ::Result<Origin> {$/;"	f
parse_header	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/pragma.rs	/^    fn parse_header(raw: &[Vec<u8>]) -> ::Result<Pragma> {$/;"	f
parse_header	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/prefer.rs	/^    fn parse_header(raw: &[Vec<u8>]) -> ::Result<Prefer> {$/;"	f
parse_header	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/preference_applied.rs	/^    fn parse_header(raw: &[Vec<u8>]) -> ::Result<PreferenceApplied> {$/;"	f
parse_header	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/range.rs	/^    fn parse_header(raw: &[Vec<u8>]) -> ::Result<Range> {$/;"	f
parse_header	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/referrer_policy.rs	/^    fn parse_header(raw: &[Vec<u8>]) -> ::Result<ReferrerPolicy> {$/;"	f
parse_header	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/set_cookie.rs	/^    fn parse_header(raw: &[Vec<u8>]) -> ::Result<SetCookie> {$/;"	f
parse_header	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/strict_transport_security.rs	/^    fn parse_header(raw: &[Vec<u8>]) -> ::Result<StrictTransportSecurity> {$/;"	f
parse_header	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/mod.rs	/^        fn parse_header(raw: &[Vec<u8>]) -> ::Result<CrazyLength> {$/;"	f
parse_header	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/mod.rs	/^    fn parse_header(raw: &[Vec<u8>]) -> ::Result<Self>;$/;"	f
parse_headers	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h2.rs	/^fn parse_headers(http2_headers: Vec<Http2Header>) -> ::Result<Headers> {$/;"	f
parse_missing_path_parts	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/server/instance.rs	/^fn parse_missing_path_parts() {$/;"	f
parse_missing_url_parts	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/server/instance.rs	/^fn parse_missing_url_parts() {$/;"	f
parse_option	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/connection.rs	/^    fn parse_option(header: Vec<u8>) -> Connection {$/;"	f
parse_or	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/context/parameters.rs	/^    pub fn parse_or<K: ?Sized, T>(&self, key: &K, or: T) -> T where$/;"	f
parse_or_else	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/context/parameters.rs	/^    pub fn parse_or_else<K: ?Sized, T, F>(&self, key: &K, or_else: F) -> T where$/;"	f
parse_parameters	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/utils.rs	/^pub fn parse_parameters(source: &[u8]) -> Parameters {$/;"	f
parse_path	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/server/instance.rs	/^fn parse_path(path: &str) -> ParsedUri {$/;"	f
parse_path_parts	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/server/instance.rs	/^fn parse_path_parts() {$/;"	f
parse_request	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h1.rs	/^pub fn parse_request<R: Read>(buf: &mut BufReader<R>) -> ::Result<Incoming<(Method, RequestUri)>> {$/;"	f
parse_response	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h1.rs	/^pub fn parse_response<R: Read>(buf: &mut BufReader<R>) -> ::Result<Incoming<RawStatus>> {$/;"	f
parse_response	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h2.rs	/^fn parse_response(response: ::solicit::http::Response) -> ::Result<(ResponseHead, Vec<u8>)> {$/;"	f
parse_strange_path	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/server/instance.rs	/^fn parse_strange_path() {$/;"	f
parse_strange_url	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/server/instance.rs	/^fn parse_strange_url() {$/;"	f
parse_url	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/server/instance.rs	/^fn parse_url(url: &Url) -> ParsedUri {$/;"	f
parse_url_parts	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/server/instance.rs	/^fn parse_url_parts() {$/;"	f
parsing_parameters	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/utils.rs	/^    fn parsing_parameters() {$/;"	f
parsing_parameters_with_plus	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/utils.rs	/^    fn parsing_parameters_with_plus() {$/;"	f
parsing_strange_parameters	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/utils.rs	/^    fn parsing_strange_parameters() {$/;"	f
partial_cmp	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/shared/quality_item.rs	/^    fn partial_cmp(&self, other: &QualityItem<T>) -> Option<cmp::Ordering> {$/;"	f
partial_cmp	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/status.rs	/^    fn partial_cmp(&self, other: &StatusCode) -> Option<Ordering> {$/;"	f
partial_cmp	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/log-0.3.6/src/lib.rs	/^    fn partial_cmp(&self, other: &LogLevel) -> Option<cmp::Ordering> {$/;"	f
partial_cmp	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/log-0.3.6/src/lib.rs	/^    fn partial_cmp(&self, other: &LogLevelFilter) -> Option<cmp::Ordering> {$/;"	f
patch	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/mod.rs	/^    pub fn patch<U: IntoUrl>(&self, url: U) -> RequestBuilder {$/;"	f
peer_addr	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/benches/client.rs	/^    fn peer_addr(&mut self) -> io::Result<SocketAddr> {$/;"	f
peer_addr	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/pool.rs	/^    fn peer_addr(&mut self) -> io::Result<SocketAddr> {$/;"	f
peer_addr	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/proxy.rs	/^        fn peer_addr(&mut self) -> io::Result<SocketAddr> {$/;"	f
peer_addr	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/proxy.rs	/^    fn peer_addr(&mut self) -> io::Result<SocketAddr> {$/;"	f
peer_addr	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/mock.rs	/^    fn peer_addr(&mut self) -> io::Result<SocketAddr> {$/;"	f
peer_addr	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^        fn peer_addr(&mut self) -> io::Result<SocketAddr> {$/;"	f
peer_addr	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^    fn peer_addr(&mut self) -> io::Result<SocketAddr> {$/;"	f
peer_addr	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^    fn peer_addr(&mut self) -> io::Result<SocketAddr>;$/;"	f
plaintext	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/content_type.rs	/^    pub fn plaintext() -> ContentType {$/;"	f
png	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/content_type.rs	/^    pub fn png() -> ContentType {$/;"	f
port	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/server/config.rs	/^    pub fn port(&mut self, port: u16) {$/;"	f
post	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/mod.rs	/^    pub fn post<U: IntoUrl>(&self, url: U) -> RequestBuilder {$/;"	f
prefix	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/method_router.rs	/^    fn prefix<'a, R: Into<InsertState<'a, I>>, I: Clone + Iterator<Item = &'a [u8]>>(&mut self, route: R) {$/;"	f
prefix	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/mod.rs	/^    fn prefix<'a, R: Into<InsertState<'a, I>>, I: Clone + Iterator<Item = &'a [u8]>>(&mut self, _route: R) {}$/;"	f
prefix	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/mod.rs	/^    fn prefix<'a, R: Into<InsertState<'a, I>>, I: Clone + Iterator<Item = &'a [u8]>>(&mut self, route: R) {$/;"	f
prefix	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/mod.rs	/^    fn prefix<'a, R: Into<InsertState<'a, I>>, I: Clone + Iterator<Item = &'a [u8]>>(&mut self, route: R);$/;"	f
prefix	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/or_else.rs	/^    fn prefix<'a, R: Into<InsertState<'a, I>>, I: Clone + Iterator<Item = &'a [u8]>>(&mut self, route: R) {$/;"	f
prefix	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/tree_router.rs	/^    fn prefix<'a, R: Into<InsertState<'a, I>>, I: Clone + Iterator<Item = &'a [u8]>>(&mut self, route: R) {$/;"	f
prefix	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/variables.rs	/^    fn prefix<'a, R: Into<InsertState<'a, I>>, I: Clone + Iterator<Item = &'a [u8]>>(&mut self, route: R) {$/;"	f
prefix_router_variables	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/tree_router.rs	/^    fn prefix_router_variables() {$/;"	f
prefix_router_wildcard	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/tree_router.rs	/^    fn prefix_router_wildcard() {$/;"	f
prepare_body	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h2.rs	/^fn prepare_body(body: Vec<u8>) -> Option<Vec<u8>> {$/;"	f
prepare_headers	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h2.rs	/^fn prepare_headers(mut headers: Headers) -> Vec<Http2Header> {$/;"	f
previous_response_expected_no_content	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/pool.rs	/^    fn previous_response_expected_no_content(&self) -> bool {$/;"	f
previous_response_expected_no_content	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^    fn previous_response_expected_no_content(&self) -> bool {$/;"	f
push_byte	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/context/maybe_utf8.rs	/^    pub fn push_byte(&mut self, byte: u8) {$/;"	f
push_bytes	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/context/maybe_utf8.rs	/^    pub fn push_bytes(&mut self, bytes: &[u8]) {$/;"	f
push_bytes	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/utils.rs	/^    fn push_bytes(&mut self, bytes: &[u8]) {$/;"	f
push_bytes	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/utils.rs	/^    fn push_bytes(&mut self, bytes: &[u8]);$/;"	f
push_char	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/context/maybe_utf8.rs	/^    pub fn push_char(&mut self, c: char) {$/;"	f
push_str	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/context/maybe_utf8.rs	/^    pub fn push_str(&mut self, string: &str) {$/;"	f
put	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/mod.rs	/^    pub fn put<U: IntoUrl>(&self, url: U) -> RequestBuilder {$/;"	f
q	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/shared/quality_item.rs	/^pub fn q(f: f32) -> Quality {$/;"	f
qitem	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/shared/quality_item.rs	/^pub fn qitem<T>(item: T) -> QualityItem<T> {$/;"	f
raw	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/internals/item.rs	/^    pub fn raw(&self) -> &[Vec<u8>] {$/;"	f
raw	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/mod.rs	/^    macro_rules! raw {$/;"	d
read	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/benches/client.rs	/^    fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {$/;"	f
read	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/buffer.rs	/^        fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {$/;"	f
read	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/buffer.rs	/^    fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {$/;"	f
read	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/mod.rs	/^    fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {$/;"	f
read	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/pool.rs	/^    fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {$/;"	f
read	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/proxy.rs	/^        fn read(&mut self, _buf: &mut [u8]) -> io::Result<usize> {$/;"	f
read	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/proxy.rs	/^    fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {$/;"	f
read	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/response.rs	/^    fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {$/;"	f
read	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h1.rs	/^        fn read(s: &str, result: u64) {$/;"	f
read	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h1.rs	/^    fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {$/;"	f
read	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h2.rs	/^    fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {$/;"	f
read	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/mock.rs	/^    fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {$/;"	f
read	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^        fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {$/;"	f
read	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^    fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {$/;"	f
read	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/server/request.rs	/^    fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {$/;"	f
read	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/uri.rs	/^    fn read(s: &str, result: RequestUri) {$/;"	f
read	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/context/body.rs	/^    fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {$/;"	f
read_chunk_size	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h1.rs	/^fn read_chunk_size<R: Read>(rdr: &mut R) -> io::Result<u64> {$/;"	f
read_err	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h1.rs	/^        fn read_err(s: &str) {$/;"	f
read_exact	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^        fn read_exact(&mut self, buf: &mut [u8]) -> io::Result<()> {$/;"	f
read_into_buf	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/buffer.rs	/^    pub fn read_into_buf(&mut self) -> io::Result<usize> {$/;"	f
read_json_body	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/context/body.rs	/^    pub fn read_json_body(&mut self) -> Result<json::Json, json::BuilderError> {$/;"	f
read_query_body	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/context/body.rs	/^    pub fn read_query_body(&mut self) -> io::Result<Parameters> {$/;"	f
read_to_end	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^        fn read_to_end(&mut self, buf: &mut Vec<u8>) -> io::Result<usize> {$/;"	f
read_to_string	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/response.rs	/^    fn read_to_string(mut r: Response) -> io::Result<String> {$/;"	f
read_to_string	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^        fn read_to_string(&mut self, buf: &mut String) -> io::Result<usize> {$/;"	f
read_to_string	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/server/request.rs	/^    fn read_to_string(mut req: Request) -> io::Result<String> {$/;"	f
reader_mut	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h1.rs	/^    fn reader_mut(&mut self) -> Option<&mut HttpReader<BufReader<Box<NetworkStream + Send>>>> {$/;"	f
reader_ref	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h1.rs	/^    fn reader_ref(&self) -> Option<&HttpReader<BufReader<Box<NetworkStream + Send>>>> {$/;"	f
recover_response	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/response.rs	/^    pub fn recover_response(self) -> Result<Response<'a, 'b>, FileError<'a, 'b>> {$/;"	f
remove	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/mod.rs	/^    pub fn remove<H: Header + HeaderFormat>(&mut self) -> bool {$/;"	f
remove	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/context/parameters.rs	/^    pub fn remove<K: ?Sized>(&mut self, key: &K) -> Option<MaybeUtf8Owned> where$/;"	f
remove_raw	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/mod.rs	/^    pub fn remove_raw(&mut self, name: &str) {$/;"	f
request	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/mod.rs	/^    pub fn request<U: IntoUrl>(&self, method: Method, url: U) -> RequestBuilder {$/;"	f
response_to_io_result	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/response.rs	/^fn response_to_io_result<T>(res:  Result<T, Error>) -> io::Result<T> {$/;"	f
reuse	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/pool.rs	/^    fn reuse(&mut self, key: Key, conn: PooledStreamInner<S>) {$/;"	f
route_formats	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/tree_router.rs	/^    fn route_formats() {$/;"	f
run	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/server/instance.rs	/^    fn run<R: Router>(self, server: ServerInstance<R>, threads: usize) -> HttpResult<Listening> {$/;"	f
run	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/server/instance.rs	/^    pub fn run(self, _scheme: Scheme) -> HttpResult<Listening> {$/;"	f
run	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/server/instance.rs	/^    pub fn run(self, scheme: Scheme) -> HttpResult<Listening> {$/;"	f
run	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/server/mod.rs	/^    pub fn run(self) -> HttpResult<Listening> {$/;"	f
run_echo	/home/kibbles/Projects/rust/tin_can_telephone/src/tcp_example.rs	/^pub fn run_echo() {$/;"	f
run_request	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/request.rs	/^    fn run_request(req: Request<Fresh>) -> Vec<u8> {$/;"	f
safe	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/method.rs	/^    pub fn safe(&self) -> bool {$/;"	f
scheme	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/authorization.rs	/^	fn scheme() -> Option<&'static str> {$/;"	f
scheme	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/authorization.rs	/^    fn scheme() -> Option<&'static str> {$/;"	f
scheme	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/authorization.rs	/^    fn scheme() -> Option<&'static str>;$/;"	f
search_speed	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/tree_router.rs	/^    fn search_speed(b: &mut Bencher) {$/;"	f
security_framework	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^pub mod security_framework {$/;"	m
segments	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/mod.rs	/^        fn segments<'a, 'b: 'a, T: Deref<Target=R> + 'b, R: ?Sized + Route<'a, Segments=S> + 'b, S: Iterator<Item=&'a[u8]>>(s: &'a T) -> S {$/;"	f
segments	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/mod.rs	/^    fn segments(&'a self) -> <Self as Route<'a>>::Segments {$/;"	f
segments	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/mod.rs	/^    fn segments(&'a self) -> <Self as Route<'a>>::Segments;$/;"	f
segments	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/mod.rs	/^    fn segments(&'a self) -> Self::Segments {$/;"	f
send	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/mod.rs	/^    pub fn send(self) -> ::Result<Response> {$/;"	f
send	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/request.rs	/^    pub fn send(self) -> ::Result<Response> {$/;"	f
send	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/server/response.rs	/^    pub fn send(mut self, body: &[u8]) -> io::Result<()> {$/;"	f
send	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/response.rs	/^    pub fn send<'d, Content: Into<Data<'d>>>(&mut self, content: Content) {$/;"	f
send	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/response.rs	/^    pub fn send<'d, Content: Into<Data<'d>>>(self, content: Content) {$/;"	f
send_file	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/response.rs	/^    pub fn send_file<P: AsRef<Path>>(self, path: P) -> Result<(), FileError<'a, 'b>> {$/;"	f
send_file_with_mime	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/response.rs	/^    pub fn send_file_with_mime<P, F>(mut self, path: P, to_mime: F) -> Result<(), FileError<'a, 'b>> where$/;"	f
send_not_found	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/response.rs	/^    pub fn send_not_found<'d, M: Into<Data<'d>>>(self, message: M) -> Result<(), FileError<'a, 'b>> {$/;"	f
send_sized	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/response.rs	/^    fn send_sized<'d, Content: Into<Data<'d>>>(&mut self, content: Content) -> Result<(), Error> {$/;"	f
serialize	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/mod.rs	/^            fn serialize<S>(&self, serializer: &mut S) -> Result<(), S::Error>$/;"	f
serialize	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/mod.rs	/^    fn serialize<S>(&self, serializer: &mut S) -> Result<(), S::Error> where S: Serializer {$/;"	f
serialize	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/mod.rs	/^    fn serialize<S>(&self, serializer: &mut S) -> Result<(), S::Error> where S: Serializer {$/;"	f
serialize	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/method.rs	/^    fn serialize<S>(&self, serializer: &mut S) -> Result<(), S::Error> where S: Serializer {$/;"	f
set	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/internals/cell.rs	/^    pub fn set(&self, val: T) {$/;"	f
set	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/mod.rs	/^    pub fn set<H: Header + HeaderFormat>(&mut self, value: H) {$/;"	f
set	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/log-0.3.6/src/lib.rs	/^    pub fn set(&self, level: LogLevelFilter) {$/;"	f
set_logger	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/log-0.3.6/src/lib.rs	/^pub fn set_logger<M>(make_logger: M) -> Result<(), SetLoggerError>$/;"	f
set_logger	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/log-0.3.6/tests/filters.rs	/^fn set_logger<M>(make_logger: M) -> Result<(), log::SetLoggerError>$/;"	f
set_logger_raw	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/log-0.3.6/src/lib.rs	/^pub unsafe fn set_logger_raw<M>(make_logger: M) -> Result<(), SetLoggerError>$/;"	f
set_outgoing	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h1.rs	/^    fn set_outgoing(&mut self, mut head: RequestHead) -> ::Result<RequestHead> {$/;"	f
set_outgoing	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h2.rs	/^    fn set_outgoing(&mut self, head: RequestHead) -> ::Result<RequestHead> {$/;"	f
set_outgoing	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/message.rs	/^    fn set_outgoing(&mut self, head: RequestHead) -> ::Result<RequestHead>;$/;"	f
set_previous_response_expected_no_content	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/pool.rs	/^    fn set_previous_response_expected_no_content(&mut self, expected: bool) {$/;"	f
set_previous_response_expected_no_content	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^    fn set_previous_response_expected_no_content(&mut self, _expected: bool) { }$/;"	f
set_proxied	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h1.rs	/^    fn set_proxied(&mut self, val: bool) {$/;"	f
set_proxied	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/message.rs	/^    fn set_proxied(&mut self, val: bool) {$/;"	f
set_raw	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/mod.rs	/^    pub fn set_raw<K: Into<Cow<'static, str>> + fmt::Debug>(&mut self, name: K,$/;"	f
set_read_timeout	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/benches/client.rs	/^    fn set_read_timeout(&self, _: Option<Duration>) -> io::Result<()> {$/;"	f
set_read_timeout	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/mod.rs	/^    pub fn set_read_timeout(&mut self, dur: Option<Duration>) {$/;"	f
set_read_timeout	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/pool.rs	/^    fn set_read_timeout(&self, dur: Option<Duration>) -> io::Result<()> {$/;"	f
set_read_timeout	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/proxy.rs	/^        fn set_read_timeout(&self, _dur: Option<Duration>) -> io::Result<()> {$/;"	f
set_read_timeout	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/proxy.rs	/^    fn set_read_timeout(&self, dur: Option<Duration>) -> io::Result<()> {$/;"	f
set_read_timeout	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/request.rs	/^    pub fn set_read_timeout(&self, dur: Option<Duration>) -> io::Result<()> {$/;"	f
set_read_timeout	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h1.rs	/^    fn set_read_timeout(&self, dur: Option<Duration>) -> io::Result<()> {$/;"	f
set_read_timeout	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h2.rs	/^    fn set_read_timeout(&self, _dur: Option<Duration>) -> io::Result<()> {$/;"	f
set_read_timeout	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/message.rs	/^    fn set_read_timeout(&self, dur: Option<Duration>) -> io::Result<()>;$/;"	f
set_read_timeout	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/mock.rs	/^    fn set_read_timeout(&self, dur: Option<Duration>) -> io::Result<()> {$/;"	f
set_read_timeout	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^        fn set_read_timeout(&self, dur: Option<Duration>) -> io::Result<()> {$/;"	f
set_read_timeout	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^    fn set_read_timeout(&self, dur: Option<Duration>) -> io::Result<()> {$/;"	f
set_read_timeout	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^    fn set_read_timeout(&self, dur: Option<Duration>) -> io::Result<()>;$/;"	f
set_read_timeout	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/server/mod.rs	/^    fn set_read_timeout(&self, s: &NetworkStream, timeout: Option<Duration>) -> io::Result<()> {$/;"	f
set_read_timeout	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/server/mod.rs	/^    pub fn set_read_timeout(&mut self, dur: Option<Duration>) {$/;"	f
set_read_timeout	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/server/request.rs	/^    pub fn set_read_timeout(&self, timeout: Option<Duration>) -> io::Result<()> {$/;"	f
set_redirect_policy	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/mod.rs	/^    pub fn set_redirect_policy(&mut self, policy: RedirectPolicy) {$/;"	f
set_status	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/response.rs	/^    pub fn set_status(&mut self, status: StatusCode) {$/;"	f
set_tag	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/shared/entity.rs	/^    pub fn set_tag(&mut self, tag: String) {$/;"	f
set_timeouts	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/server/mod.rs	/^    fn set_timeouts(&self, s: &NetworkStream) -> io::Result<()> {$/;"	f
set_write_timeout	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/benches/client.rs	/^    fn set_write_timeout(&self, _: Option<Duration>) -> io::Result<()> {$/;"	f
set_write_timeout	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/mod.rs	/^    pub fn set_write_timeout(&mut self, dur: Option<Duration>) {$/;"	f
set_write_timeout	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/pool.rs	/^    fn set_write_timeout(&self, dur: Option<Duration>) -> io::Result<()> {$/;"	f
set_write_timeout	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/proxy.rs	/^        fn set_write_timeout(&self, _dur: Option<Duration>) -> io::Result<()> {$/;"	f
set_write_timeout	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/proxy.rs	/^    fn set_write_timeout(&self, dur: Option<Duration>) -> io::Result<()> {$/;"	f
set_write_timeout	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/request.rs	/^    pub fn set_write_timeout(&self, dur: Option<Duration>) -> io::Result<()> {$/;"	f
set_write_timeout	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h1.rs	/^    fn set_write_timeout(&self, dur: Option<Duration>) -> io::Result<()> {$/;"	f
set_write_timeout	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h2.rs	/^    fn set_write_timeout(&self, _dur: Option<Duration>) -> io::Result<()> {$/;"	f
set_write_timeout	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/message.rs	/^    fn set_write_timeout(&self, dur: Option<Duration>) -> io::Result<()>;$/;"	f
set_write_timeout	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/mock.rs	/^    fn set_write_timeout(&self, dur: Option<Duration>) -> io::Result<()> {$/;"	f
set_write_timeout	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^        fn set_write_timeout(&self, dur: Option<Duration>) -> io::Result<()> {$/;"	f
set_write_timeout	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^    fn set_write_timeout(&self, dur: Option<Duration>) -> io::Result<()> {$/;"	f
set_write_timeout	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^    fn set_write_timeout(&self, dur: Option<Duration>) -> io::Result<()>;$/;"	f
set_write_timeout	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/server/mod.rs	/^    fn set_write_timeout(&self, s: &NetworkStream, timeout: Option<Duration>) -> io::Result<()> {$/;"	f
set_write_timeout	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/server/mod.rs	/^    pub fn set_write_timeout(&mut self, dur: Option<Duration>) {$/;"	f
several_static_routes	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/tree_router.rs	/^    fn several_static_routes() {$/;"	f
several_variable_routes	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/tree_router.rs	/^    fn several_variable_routes() {$/;"	f
several_wildcards_routes	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/tree_router.rs	/^    fn several_wildcards_routes() {$/;"	f
several_wildcards_routes_no_hyperlinks	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/tree_router.rs	/^    fn several_wildcards_routes_no_hyperlinks() {$/;"	f
should_have_response_body	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h1.rs	/^fn should_have_response_body(method: &Method, status: u16) -> bool {$/;"	f
should_keep_alive	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/mod.rs	/^pub fn should_keep_alive(version: HttpVersion, headers: &Headers) -> bool {$/;"	f
shutdown_logger	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/log-0.3.6/src/lib.rs	/^pub fn shutdown_logger() -> Result<Box<Log>, ShutdownLoggerError> {$/;"	f
shutdown_logger_raw	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/log-0.3.6/src/lib.rs	/^pub fn shutdown_logger_raw() -> Result<*const Log, ShutdownLoggerError> {$/;"	f
silent_abort	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/filter.rs	/^    pub fn silent_abort() -> ResponseAction<'a> {$/;"	f
size	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/mod.rs	/^    fn size(&self) -> Option<u64> {$/;"	f
size_hint	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/mod.rs	/^    fn size_hint(&self) -> (usize, Option<usize>) {$/;"	f
skip	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/mod.rs	/^    pub fn skip(&mut self) {$/;"	f
smash_bros_server	/home/kibbles/Projects/rust/tin_can_telephone/src/example.rs	/^pub fn smash_bros_server() -> MyServer<Salutation> {$/;"	f
snapshot	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/mod.rs	/^    pub fn snapshot(&self) -> (usize, usize) {$/;"	f
sock	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/server/request.rs	/^    fn sock(s: &str) -> SocketAddr {$/;"	f
spawn_with	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/server/listener.rs	/^fn spawn_with<A, F>(supervisor: mpsc::Sender<()>, work: Arc<F>, mut acceptor: A)$/;"	f
split_in_two	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/content_range.rs	/^fn split_in_two(s: &str, separator: char) -> Option<(&str, &str)> {$/;"	f
ssl	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/server/request.rs	/^    pub fn ssl<T: NetworkStream>(&self) -> Option<&T> {$/;"	f
start	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/request.rs	/^    pub fn start(mut self) -> ::Result<Request<Streaming>> {$/;"	f
start	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/server/response.rs	/^    pub fn start(mut self) -> io::Result<Response<'a, Streaming>> {$/;"	f
status	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/server/response.rs	/^    pub fn status(&self) -> status::StatusCode { self.status }$/;"	f
status	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/response.rs	/^    pub fn status(&self) -> StatusCode {$/;"	f
status_mut	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/server/response.rs	/^    pub fn status_mut(&mut self) -> &mut status::StatusCode { &mut self.status }$/;"	f
status_raw	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/response.rs	/^    pub fn status_raw(&self) -> &RawStatus {$/;"	f
strong	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/shared/entity.rs	/^    pub fn strong(tag: String) -> EntityTag {$/;"	f
strong_eq	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/shared/entity.rs	/^    pub fn strong_eq(&self, other: &EntityTag) -> bool {$/;"	f
strong_ne	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/shared/entity.rs	/^    pub fn strong_ne(&self, other: &EntityTag) -> bool {$/;"	f
t	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/log-0.3.6/tests/filters.rs	/^    fn t(lvl: LogLevel, filter: LogLevelFilter) -> Option<LogLevel> {$/;"	f
tag	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/shared/entity.rs	/^    pub fn tag(&self) -> &str {$/;"	f
take_request	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h2.rs	/^    fn take_request(&mut self) -> Option<Http2Request> {$/;"	f
target	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/log-0.3.6/src/lib.rs	/^    pub fn target(&self) -> &str {$/;"	f
test	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/internals/cell.rs	/^mod test {$/;"	m
test	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/log-0.3.6/tests/filters.rs	/^fn test(a: &State, filter: LogLevelFilter) {$/;"	f
test	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/tree_router.rs	/^mod test {$/;"	m
test	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/utils.rs	/^mod test {$/;"	m
test2	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/vary.rs	/^        fn test2() {$/;"	f
test3	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/upgrade.rs	/^        fn test3() {$/;"	f
test_accept	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/mod.rs	/^    fn test_accept() {$/;"	f
test_access_control_allow_credentials	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/access_control_allow_credentials.rs	/^mod test_access_control_allow_credentials {$/;"	m
test_access_control_allow_orgin	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/access_control_allow_origin.rs	/^mod test_access_control_allow_orgin {$/;"	m
test_as_str	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/method.rs	/^    fn test_as_str() {$/;"	f
test_asctime	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/shared/httpdate.rs	/^    fn test_asctime() {$/;"	f
test_basic_auth	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/authorization.rs	/^    fn test_basic_auth() {$/;"	f
test_basic_auth_no_password	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/authorization.rs	/^    fn test_basic_auth_no_password() {$/;"	f
test_basic_auth_parse	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/authorization.rs	/^    fn test_basic_auth_parse() {$/;"	f
test_basic_auth_parse_no_password	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/authorization.rs	/^    fn test_basic_auth_parse_no_password() {$/;"	f
test_bearer_auth	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/authorization.rs	/^    fn test_bearer_auth() {$/;"	f
test_bearer_auth_parse	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/authorization.rs	/^    fn test_bearer_auth_parse() {$/;"	f
test_cause	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/error.rs	/^    fn test_cause() {$/;"	f
test_check_continue_default	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/server/mod.rs	/^    fn test_check_continue_default() {$/;"	f
test_check_continue_reject	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/server/mod.rs	/^    fn test_check_continue_reject() {$/;"	f
test_chunk_size_with_extension	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/response.rs	/^    fn test_chunk_size_with_extension() {$/;"	f
test_chunk_size_with_extension	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/server/request.rs	/^    fn test_chunk_size_with_extension() {$/;"	f
test_clear	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/mod.rs	/^    fn test_clear() {$/;"	f
test_closed	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/pool.rs	/^    fn test_closed() {$/;"	f
test_cmp	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/shared/entity.rs	/^    fn test_cmp() {$/;"	f
test_connect_and_drop	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/pool.rs	/^    fn test_connect_and_drop() {$/;"	f
test_consume_and_get_buf	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/buffer.rs	/^    fn test_consume_and_get_buf() {$/;"	f
test_content_type	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/mod.rs	/^    fn test_content_type() {$/;"	f
test_cross_cmp	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/log-0.3.6/src/lib.rs	/^     fn test_cross_cmp() {$/;"	f
test_cross_eq	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/log-0.3.6/src/lib.rs	/^     fn test_cross_eq() {$/;"	f
test_different_reads	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/mod.rs	/^    fn test_different_reads() {$/;"	f
test_different_structs_for_same_header	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/mod.rs	/^    fn test_different_structs_for_same_header() {$/;"	f
test_display	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/content_disposition.rs	/^    fn test_display() {$/;"	f
test_display	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/shared/charset.rs	/^fn test_display() {$/;"	f
test_downcast_box_stream	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^    fn test_downcast_box_stream() {$/;"	f
test_downcast_unchecked_box_stream	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^    fn test_downcast_unchecked_box_stream() {$/;"	f
test_duplicates	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/content_length.rs	/^    fn test_duplicates() {$/;"	f
test_eof_closes	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/pool.rs	/^    fn test_eof_closes() {$/;"	f
test_eq	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/mod.rs	/^    fn test_eq() {$/;"	f
test_error_trait	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/log-0.3.6/src/lib.rs	/^     fn test_error_trait() {$/;"	f
test_etag_fmt	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/shared/entity.rs	/^    fn test_etag_fmt() {$/;"	f
test_etag_parse_failures	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/shared/entity.rs	/^    fn test_etag_parse_failures() {$/;"	f
test_etag_parse_success	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/shared/entity.rs	/^    fn test_etag_parse_success() {$/;"	f
test_fail_with_args	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/prefer.rs	/^    fn test_fail_with_args() {$/;"	f
test_fmt	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/cookie.rs	/^fn test_fmt() {$/;"	f
test_fmt	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/range.rs	/^fn test_fmt() {$/;"	f
test_fmt	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/set_cookie.rs	/^fn test_fmt() {$/;"	f
test_fmt	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/method.rs	/^    fn test_fmt() {$/;"	f
test_fmt_extended_value_with_encoding	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/parsing.rs	/^    fn test_fmt_extended_value_with_encoding() {$/;"	f
test_fmt_extended_value_with_encoding_and_language_tag	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/parsing.rs	/^    fn test_fmt_extended_value_with_encoding_and_language_tag() {$/;"	f
test_format_ignore_parameters	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/preference_applied.rs	/^    fn test_format_ignore_parameters() {$/;"	f
test_fresh_drop	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/server/response.rs	/^    fn test_fresh_drop() {$/;"	f
test_fresh_drop_panicing	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/server/response.rs	/^    fn test_fresh_drop_panicing() {$/;"	f
test_fresh_start	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/server/response.rs	/^    fn test_fresh_start() {$/;"	f
test_from	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/error.rs	/^    fn test_from() {$/;"	f
test_from_raw	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/mod.rs	/^    fn test_from_raw() {$/;"	f
test_from_ssl	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/error.rs	/^    fn test_from_ssl() {$/;"	f
test_from_str	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/method.rs	/^    fn test_from_str() {$/;"	f
test_get_empty_body	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/request.rs	/^    fn test_get_empty_body() {$/;"	f
test_get_empty_body	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/server/request.rs	/^    fn test_get_empty_body() {$/;"	f
test_get_mutable	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/mod.rs	/^    fn test_get_mutable() {$/;"	f
test_get_with_body	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/server/request.rs	/^    fn test_get_with_body() {$/;"	f
test_hashable	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/method.rs	/^    fn test_hashable() {$/;"	f
test_head_empty_body	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/request.rs	/^    fn test_head_empty_body() {$/;"	f
test_head_empty_body	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/server/request.rs	/^    fn test_head_empty_body() {$/;"	f
test_head_response_body_keep_alive	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/mod.rs	/^    fn test_head_response_body_keep_alive() {$/;"	f
test_header	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/mod.rs	/^macro_rules! test_header {$/;"	d
test_headers_show	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/mod.rs	/^    fn test_headers_show() {$/;"	f
test_headers_show_raw	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/mod.rs	/^    fn test_headers_show_raw() {$/;"	f
test_host	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/host.rs	/^    fn test_host() {$/;"	f
test_host_header	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/request.rs	/^    fn test_host_header() {$/;"	f
test_http2_message_not_readable	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h2.rs	/^    fn test_http2_message_not_readable() {$/;"	f
test_http2_message_not_writable	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h2.rs	/^    fn test_http2_message_not_writable() {$/;"	f
test_http2_parse_headers	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h2.rs	/^    fn test_http2_parse_headers() {$/;"	f
test_http2_parse_headers_invalid_name	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h2.rs	/^    fn test_http2_parse_headers_invalid_name() {$/;"	f
test_http2_parse_headers_with_cookie	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h2.rs	/^    fn test_http2_parse_headers_with_cookie() {$/;"	f
test_http2_parse_headers_with_set_cookie	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h2.rs	/^    fn test_http2_parse_headers_with_set_cookie() {$/;"	f
test_http2_parse_response_no_body	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h2.rs	/^    fn test_http2_parse_response_no_body() {$/;"	f
test_http2_parse_response_no_status_code	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h2.rs	/^    fn test_http2_parse_response_no_status_code() {$/;"	f
test_http2_parse_response_with_body	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h2.rs	/^    fn test_http2_parse_response_with_body() {$/;"	f
test_http2_prepapre_headers_with_cookie	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h2.rs	/^    fn test_http2_prepapre_headers_with_cookie() {$/;"	f
test_http2_prepare_headers	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h2.rs	/^    fn test_http2_prepare_headers() {$/;"	f
test_http2_prepare_headers_with_set_cookie	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h2.rs	/^    fn test_http2_prepare_headers_with_set_cookie() {$/;"	f
test_http2_request_no_body	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h2.rs	/^    fn test_http2_request_no_body() {$/;"	f
test_http2_request_with_body	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h2.rs	/^    fn test_http2_request_with_body() {$/;"	f
test_http2_response_empty_body	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h2.rs	/^    fn test_http2_response_empty_body() {$/;"	f
test_http2_response_headers	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h2.rs	/^    fn test_http2_response_headers() {$/;"	f
test_http2_response_no_body	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h2.rs	/^    fn test_http2_response_no_body() {$/;"	f
test_http2_response_with_body	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h2.rs	/^    fn test_http2_response_with_body() {$/;"	f
test_idempotent	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/method.rs	/^    fn test_idempotent() {$/;"	f
test_if_none_match	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/if_none_match.rs	/^    fn test_if_none_match() {$/;"	f
test_if_range	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/if_range.rs	/^mod test_if_range {$/;"	m
test_imf_fixdate	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/shared/httpdate.rs	/^    fn test_imf_fixdate() {$/;"	f
test_into_inner	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/response.rs	/^    fn test_into_inner() {$/;"	f
test_invalid_chunk_size_extension	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/response.rs	/^    fn test_invalid_chunk_size_extension() {$/;"	f
test_invalid_chunk_size_extension	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/server/request.rs	/^    fn test_invalid_chunk_size_extension() {$/;"	f
test_invalid_chunk_size_not_hex_digit	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/response.rs	/^    fn test_invalid_chunk_size_not_hex_digit() {$/;"	f
test_invalid_chunk_size_not_hex_digit	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/server/request.rs	/^    fn test_invalid_chunk_size_not_hex_digit() {$/;"	f
test_iter	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/mod.rs	/^    fn test_iter() {$/;"	f
test_len	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/mod.rs	/^    fn test_len() {$/;"	f
test_loglevel_from_str	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/log-0.3.6/src/lib.rs	/^     fn test_loglevel_from_str() {$/;"	f
test_loglevel_show	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/log-0.3.6/src/lib.rs	/^     fn test_loglevel_show() {$/;"	f
test_loglevelfilter_from_str	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/log-0.3.6/src/lib.rs	/^     fn test_loglevelfilter_from_str() {$/;"	f
test_loglevelfilter_show	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/log-0.3.6/src/lib.rs	/^     fn test_loglevelfilter_show() {$/;"	f
test_message_get_incoming_invalid_content_length	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h1.rs	/^    fn test_message_get_incoming_invalid_content_length() {$/;"	f
test_multiple_reads	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/mod.rs	/^    fn test_multiple_reads() {$/;"	f
test_no_content	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/server/response.rs	/^    fn test_no_content() {$/;"	f
test_no_date	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/shared/httpdate.rs	/^    fn test_no_date() {$/;"	f
test_opt_cell_clone	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/internals/cell.rs	/^    fn test_opt_cell_clone() {$/;"	f
test_opt_cell_set	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/internals/cell.rs	/^    fn test_opt_cell_set() {$/;"	f
test_origin	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/origin.rs	/^    fn test_origin() {$/;"	f
test_parse	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/connection.rs	/^    fn test_parse() {$/;"	f
test_parse	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/cookie.rs	/^fn test_parse() {$/;"	f
test_parse	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/set_cookie.rs	/^fn test_parse() {$/;"	f
test_parse	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/shared/charset.rs	/^fn test_parse() {$/;"	f
test_parse_argument	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/cache_control.rs	/^    fn test_parse_argument() {$/;"	f
test_parse_argument	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/prefer.rs	/^    fn test_parse_argument() {$/;"	f
test_parse_bad_syntax	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/cache_control.rs	/^    fn test_parse_bad_syntax() {$/;"	f
test_parse_bytes_range_valid	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/range.rs	/^fn test_parse_bytes_range_valid() {$/;"	f
test_parse_chunked_request	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/server/request.rs	/^    fn test_parse_chunked_request() {$/;"	f
test_parse_chunked_response	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/response.rs	/^    fn test_parse_chunked_response() {$/;"	f
test_parse_duplicate_directives	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/strict_transport_security.rs	/^    fn test_parse_duplicate_directives() {$/;"	f
test_parse_error_closes	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/response.rs	/^    fn test_parse_error_closes() {$/;"	f
test_parse_extended_value_missing_language_tag_and_encoding	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/parsing.rs	/^    fn test_parse_extended_value_missing_language_tag_and_encoding() {$/;"	f
test_parse_extended_value_partially_formatted	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/parsing.rs	/^    fn test_parse_extended_value_partially_formatted() {$/;"	f
test_parse_extended_value_partially_formatted_blank	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/parsing.rs	/^    fn test_parse_extended_value_partially_formatted_blank() {$/;"	f
test_parse_extended_value_with_encoding	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/parsing.rs	/^    fn test_parse_extended_value_with_encoding() {$/;"	f
test_parse_extended_value_with_encoding_and_language_tag	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/parsing.rs	/^    fn test_parse_extended_value_with_encoding_and_language_tag() {$/;"	f
test_parse_extension	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/cache_control.rs	/^    fn test_parse_extension() {$/;"	f
test_parse_extension	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/prefer.rs	/^    fn test_parse_extension() {$/;"	f
test_parse_header	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/content_disposition.rs	/^    fn test_parse_header() {$/;"	f
test_parse_header	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/pragma.rs	/^fn test_parse_header() {$/;"	f
test_parse_header	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/referrer_policy.rs	/^fn test_parse_header() {$/;"	f
test_parse_include_subdomains	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/strict_transport_security.rs	/^    fn test_parse_include_subdomains() {$/;"	f
test_parse_incoming	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h1.rs	/^    fn test_parse_incoming() {$/;"	f
test_parse_invalid	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/range.rs	/^fn test_parse_invalid() {$/;"	f
test_parse_max_age	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/strict_transport_security.rs	/^    fn test_parse_max_age() {$/;"	f
test_parse_max_age_nan	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/strict_transport_security.rs	/^    fn test_parse_max_age_nan() {$/;"	f
test_parse_max_age_no_value	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/strict_transport_security.rs	/^    fn test_parse_max_age_no_value() {$/;"	f
test_parse_multiple_headers	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/cache_control.rs	/^    fn test_parse_multiple_headers() {$/;"	f
test_parse_multiple_headers	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/prefer.rs	/^    fn test_parse_multiple_headers() {$/;"	f
test_parse_no_max_age	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/strict_transport_security.rs	/^    fn test_parse_no_max_age() {$/;"	f
test_parse_quote_form	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/cache_control.rs	/^    fn test_parse_quote_form() {$/;"	f
test_parse_quote_form	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/prefer.rs	/^    fn test_parse_quote_form() {$/;"	f
test_parse_quoted_max_age	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/strict_transport_security.rs	/^    fn test_parse_quoted_max_age() {$/;"	f
test_parse_raw_status	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h1.rs	/^    fn test_parse_raw_status() {$/;"	f
test_parse_spaces_max_age	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/strict_transport_security.rs	/^    fn test_parse_spaces_max_age() {$/;"	f
test_parse_tcp_closed	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h1.rs	/^    fn test_parse_tcp_closed() {$/;"	f
test_parse_unregistered_range_valid	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/range.rs	/^fn test_parse_unregistered_range_valid() {$/;"	f
test_post_chunked	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/request.rs	/^    fn test_post_chunked() {$/;"	f
test_post_chunked_with_encoding	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/request.rs	/^    fn test_post_chunked_with_encoding() {$/;"	f
test_post_content_length	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/request.rs	/^    fn test_post_content_length() {$/;"	f
test_post_empty_body	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/server/request.rs	/^    fn test_post_empty_body() {$/;"	f
test_proxy	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/mod.rs	/^    fn test_proxy() {$/;"	f
test_proxy	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/request.rs	/^    fn test_proxy() {$/;"	f
test_proxy_tunnel	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/mod.rs	/^    fn test_proxy_tunnel() {$/;"	f
test_ptr_map_cell_clone	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/internals/cell.rs	/^    fn test_ptr_map_cell_clone() {$/;"	f
test_ptr_map_cell_many	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/internals/cell.rs	/^    fn test_ptr_map_cell_many() {$/;"	f
test_ptr_map_cell_none	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/internals/cell.rs	/^    fn test_ptr_map_cell_none() {$/;"	f
test_ptr_map_cell_one	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/internals/cell.rs	/^    fn test_ptr_map_cell_one() {$/;"	f
test_ptr_map_cell_two	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/internals/cell.rs	/^    fn test_ptr_map_cell_two() {$/;"	f
test_quality	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/shared/quality_item.rs	/^    fn test_quality() {$/;"	f
test_quality2	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/shared/quality_item.rs	/^    fn test_quality2() {$/;"	f
test_quality_invalid	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/shared/quality_item.rs	/^    fn test_quality_invalid() {$/;"	f
test_quality_invalid2	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/shared/quality_item.rs	/^    fn test_quality_invalid2() {$/;"	f
test_quality_item_from_str1	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/shared/quality_item.rs	/^    fn test_quality_item_from_str1() {$/;"	f
test_quality_item_from_str2	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/shared/quality_item.rs	/^    fn test_quality_item_from_str2() {$/;"	f
test_quality_item_from_str3	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/shared/quality_item.rs	/^    fn test_quality_item_from_str3() {$/;"	f
test_quality_item_from_str4	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/shared/quality_item.rs	/^    fn test_quality_item_from_str4() {$/;"	f
test_quality_item_from_str5	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/shared/quality_item.rs	/^    fn test_quality_item_from_str5() {$/;"	f
test_quality_item_from_str6	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/shared/quality_item.rs	/^    fn test_quality_item_from_str6() {$/;"	f
test_quality_item_ordering	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/shared/quality_item.rs	/^    fn test_quality_item_ordering() {$/;"	f
test_quality_item_show1	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/shared/quality_item.rs	/^    fn test_quality_item_show1() {$/;"	f
test_quality_item_show2	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/shared/quality_item.rs	/^    fn test_quality_item_show2() {$/;"	f
test_quality_item_show3	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/shared/quality_item.rs	/^    fn test_quality_item_show3() {$/;"	f
test_raw_auth	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/authorization.rs	/^    fn test_raw_auth() {$/;"	f
test_raw_auth_parse	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/authorization.rs	/^    fn test_raw_auth_parse() {$/;"	f
test_read_chunk_size	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h1.rs	/^    fn test_read_chunk_size() {$/;"	f
test_read_chunked_early_eof	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h1.rs	/^    fn test_read_chunked_early_eof() {$/;"	f
test_read_sized_early_eof	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h1.rs	/^    fn test_read_sized_early_eof() {$/;"	f
test_redirect_dontfollow	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/mod.rs	/^    fn test_redirect_dontfollow() {$/;"	f
test_redirect_followall	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/mod.rs	/^    fn test_redirect_followall() {$/;"	f
test_redirect_followif	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/mod.rs	/^    fn test_redirect_followif() {$/;"	f
test_remove_raw	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/mod.rs	/^    fn test_remove_raw() {$/;"	f
test_resize	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/buffer.rs	/^    fn test_resize() {$/;"	f
test_rfc_850	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/shared/httpdate.rs	/^    fn test_rfc_850() {$/;"	f
test_safe	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/method.rs	/^    fn test_safe() {$/;"	f
test_set_raw	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/mod.rs	/^    fn test_set_raw() {$/;"	f
test_should_keep_alive	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/mod.rs	/^fn test_should_keep_alive() {$/;"	f
test_status_code	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/status.rs	/^    fn test_status_code() {$/;"	f
test_streaming_drop	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/server/response.rs	/^    fn test_streaming_drop() {$/;"	f
test_streaming_end	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/server/response.rs	/^    fn test_streaming_end() {$/;"	f
test_to_log_level	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/log-0.3.6/src/lib.rs	/^     fn test_to_log_level() {$/;"	f
test_to_log_level_filter	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/log-0.3.6/src/lib.rs	/^     fn test_to_log_level_filter() {$/;"	f
test_trailing_whitespace	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/mod.rs	/^    fn test_trailing_whitespace() {$/;"	f
test_uri_display	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/uri.rs	/^fn test_uri_display() {$/;"	f
test_uri_fromstr	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/uri.rs	/^fn test_uri_fromstr() {$/;"	f
test_url_query	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/request.rs	/^    fn test_url_query() {$/;"	f
test_write_chunked	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h1.rs	/^    fn test_write_chunked() {$/;"	f
test_write_error_closes	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/request.rs	/^    fn test_write_error_closes() {$/;"	f
test_write_sized	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h1.rs	/^    fn test_write_sized() {$/;"	f
tests	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/buffer.rs	/^mod tests {$/;"	m
tests	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/mod.rs	/^mod tests {$/;"	m
tests	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/pool.rs	/^mod tests {$/;"	m
tests	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/request.rs	/^mod tests {$/;"	m
tests	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/response.rs	/^mod tests {$/;"	m
tests	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/error.rs	/^mod tests {$/;"	m
tests	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/authorization.rs	/^mod tests {$/;"	m
tests	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/cache_control.rs	/^mod tests {$/;"	m
tests	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/connection.rs	/^mod tests {$/;"	m
tests	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/content_disposition.rs	/^mod tests {$/;"	m
tests	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/host.rs	/^mod tests {$/;"	m
tests	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/if_none_match.rs	/^mod tests {$/;"	m
tests	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/origin.rs	/^mod tests {$/;"	m
tests	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/prefer.rs	/^mod tests {$/;"	m
tests	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/preference_applied.rs	/^mod tests {$/;"	m
tests	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/strict_transport_security.rs	/^mod tests {$/;"	m
tests	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/mod.rs	/^mod tests {$/;"	m
tests	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/parsing.rs	/^mod tests {$/;"	m
tests	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/shared/entity.rs	/^mod tests {$/;"	m
tests	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/shared/httpdate.rs	/^mod tests {$/;"	m
tests	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/shared/quality_item.rs	/^mod tests {$/;"	m
tests	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h1.rs	/^mod tests {$/;"	m
tests	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h2.rs	/^mod tests {$/;"	m
tests	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/method.rs	/^mod tests {$/;"	m
tests	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^mod tests {$/;"	m
tests	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/server/mod.rs	/^mod tests {$/;"	m
tests	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/server/request.rs	/^mod tests {$/;"	m
tests	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/server/response.rs	/^mod tests {$/;"	m
tests	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/status.rs	/^mod tests {$/;"	m
tests	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/log-0.3.6/src/lib.rs	/^mod tests {$/;"	m
to_ascii_uppercase	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/log-0.3.6/src/lib.rs	/^    fn to_ascii_uppercase(c: u8) -> u8 {$/;"	f
to_cookie_jar	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/common/cookie.rs	/^    pub fn to_cookie_jar(&self, key: &[u8]) -> CookieJar<'static> {$/;"	f
to_log_level	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/log-0.3.6/src/lib.rs	/^    pub fn to_log_level(&self) -> Option<LogLevel> {$/;"	f
to_log_level_filter	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/log-0.3.6/src/lib.rs	/^    pub fn to_log_level_filter(&self) -> LogLevelFilter {$/;"	f
to_u16	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/status.rs	/^    pub fn to_u16(&self) -> u16 {$/;"	f
todo	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/lib.rs	/^macro_rules! todo($/;"	d
trace	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/log-0.3.6/src/macros.rs	/^macro_rules! trace {$/;"	d
try_option	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/server/mod.rs	/^macro_rules! try_option($/;"	d
try_parse	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h1.rs	/^    fn try_parse<'a>(headers: &'a mut [httparse::Header<'a>], buf: &'a [u8]) ->$/;"	f
try_parse	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h1.rs	/^    fn try_parse<'b>(headers: &'b mut [httparse::Header<'b>], buf: &'b [u8]) ->$/;"	f
try_parse	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h1.rs	/^fn try_parse<R: Read, T: TryParse<Subject=I>, I>(rdr: &mut BufReader<R>) -> TryParseResult<I> {$/;"	f
try_return	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/examples/server.rs	/^macro_rules! try_return($/;"	d
try_send	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/response.rs	/^    pub fn try_send<'d, Content: Into<Data<'d>>>(&mut self, content: Content) -> Result<usize, Error> {$/;"	f
try_send	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/response.rs	/^    pub fn try_send<'d, Content: Into<Data<'d>>>(&mut self, content: Content) -> io::Result<()> {$/;"	f
try_send	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/response.rs	/^    pub fn try_send<'d, Content: Into<Data<'d>>>(mut self, content: Content) -> Result<(), Error> {$/;"	f
try_split	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h2.rs	/^    fn try_split(&self) -> Result<Http2Stream<S>, io::Error> {$/;"	f
try_split	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/mock.rs	/^    fn try_split(&self) -> Result<CloneableMockStream, io::Error> {$/;"	f
try_split	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/mock.rs	/^    fn try_split(&self) -> Result<MockStream, io::Error> {$/;"	f
tunnel	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/proxy.rs	/^pub fn tunnel(proxy: (Cow<'static, str>, u16)) -> Proxy<HttpConnector, ::net::ClientWrapper> {$/;"	f
tunnel	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/proxy.rs	/^pub fn tunnel(proxy: (Cow<'static, str>, u16)) -> Proxy<HttpConnector, ::net::Openssl> {$/;"	f
tunnel	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/proxy.rs	/^pub fn tunnel(proxy: (Cow<'static, str>, u16)) -> Proxy<HttpConnector, self::no_ssl::Plaintext> {$/;"	f
typed	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/internals/item.rs	/^    pub fn typed<H: Header + HeaderFormat + Any>(&self) -> Option<&H> {$/;"	f
typed_mut	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/internals/item.rs	/^    pub fn typed_mut<H: Header + HeaderFormat>(&mut self) -> Option<&mut H> {$/;"	f
validate	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/status.rs	/^    fn validate(num: u16, status_code: StatusCode, default_code: StatusCode, reason: Option<&str>) {$/;"	f
value	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/mod.rs	/^    pub fn value<H: Header + HeaderFormat>(&self) -> Option<&'a H> {$/;"	f
value_string	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/mod.rs	/^    pub fn value_string(&self) -> String {$/;"	f
variables	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/mod.rs	/^    pub fn variables(&self, names: &[MaybeUtf8Owned]) -> HashMap<MaybeUtf8Owned, MaybeUtf8Owned> {$/;"	f
variables	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/mod.rs	/^    pub fn variables(self) -> Vec<MaybeUtf8Owned> {$/;"	f
visit_map	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/mod.rs	/^            fn visit_map<V>(&mut self, mut visitor: V) -> Result<Headers, V::Error>$/;"	f
warn	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/log-0.3.6/src/macros.rs	/^macro_rules! warn {$/;"	d
weak	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/shared/entity.rs	/^    pub fn weak(tag: String) -> EntityTag {$/;"	f
weak_eq	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/shared/entity.rs	/^    pub fn weak_eq(&self, other: &EntityTag) -> bool {$/;"	f
weak_ne	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/header/shared/entity.rs	/^    pub fn weak_ne(&self, other: &EntityTag) -> bool {$/;"	f
wildcard_speed	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/router/tree_router.rs	/^    fn wildcard_speed(b: &mut Bencher) {$/;"	f
with_capacity	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/buffer.rs	/^    pub fn with_capacity(rdr: R, cap: usize) -> BufReader<R> {$/;"	f
with_cert_and_key	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^        pub fn with_cert_and_key<C, K>(cert: C, key: K) -> Result<Openssl, SslError>$/;"	f
with_client	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h2.rs	/^    fn with_client(client: SimpleClient<Http2Stream<S>>) -> Http2Message<S> {$/;"	f
with_connector	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/mod.rs	/^    pub fn with_connector<C, S>(connector: C) -> Client$/;"	f
with_connector	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/pool.rs	/^    pub fn with_connector(config: Config, connector: C) -> Pool<C> {$/;"	f
with_connector	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/request.rs	/^    pub fn with_connector<C, S>(method: Method, url: Url, connector: &C)$/;"	f
with_connector	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h1.rs	/^    pub fn with_connector<C, S>(c: C) -> Http11Protocol$/;"	f
with_connector	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h2.rs	/^    pub fn with_connector(connector: C) -> Http2Protocol<C, S> {$/;"	f
with_connector	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^    pub fn with_connector(s: S, connector: C) -> HttpsConnector<S, C> {$/;"	f
with_headers_and_message	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/request.rs	/^    pub fn with_headers_and_message(method: Method, url: Url, headers: Headers,  message: Box<HttpMessage>)$/;"	f
with_http_proxy	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/mod.rs	/^    pub fn with_http_proxy<H>(host: H, port: u16) -> Client$/;"	f
with_input	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/mock.rs	/^    pub fn with_input(input: &[u8]) -> MockStream {$/;"	f
with_listener	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^    pub fn with_listener(listener: HttpListener, ssl: S) -> HttpsListener<S> {$/;"	f
with_message	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/request.rs	/^    pub fn with_message(method: Method, url: Url, message: Box<HttpMessage>)$/;"	f
with_message	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/response.rs	/^    pub fn with_message(url: Url, mut message: Box<HttpMessage>) -> ::Result<Response> {$/;"	f
with_pool_config	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/mod.rs	/^    pub fn with_pool_config(config: pool::Config) -> Client {$/;"	f
with_protocol	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/mod.rs	/^    pub fn with_protocol<P: Protocol + Send + Sync + 'static>(protocol: P) -> Client {$/;"	f
with_proxy_config	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/mod.rs	/^    pub fn with_proxy_config<H, S>(proxy_config: ProxyConfig<H, S>) -> Client$/;"	f
with_responses	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/mock.rs	/^    pub fn with_responses(mut responses: Vec<&[u8]>) -> MockStream {$/;"	f
with_stream	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h1.rs	/^    pub fn with_stream(stream: Box<NetworkStream + Send>) -> Http11Message {$/;"	f
with_stream	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/mock.rs	/^    pub fn with_stream(stream: MockStream) -> CloneableMockStream {$/;"	f
wrap_client	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/proxy.rs	/^        fn wrap_client(&self, _stream: T, _host: &str) -> ::Result<Self::Stream> {$/;"	f
wrap_client	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/mock.rs	/^    fn wrap_client(&self, stream: T, _host: &str) -> ::Result<T> {$/;"	f
wrap_client	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^        fn wrap_client(&self, stream: HttpStream, host: &str) -> ::Result<Self::Stream> {$/;"	f
wrap_client	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^        fn wrap_client(&self, stream: HttpStream, host: &str) -> ::Result<Stream> {$/;"	f
wrap_client	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^        fn wrap_client(&self, stream: T, host: &str) -> ::Result<Self::Stream> {$/;"	f
wrap_client	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^    fn wrap_client(&self, stream: HttpStream, host: &str) -> ::Result<Self::Stream> {$/;"	f
wrap_client	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^    fn wrap_client(&self, stream: HttpStream, host: &str) -> ::Result<Self::Stream>;$/;"	f
wrap_client	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^    fn wrap_client(&self, stream: T, host: &str) -> ::Result<Self::Stream>;$/;"	f
wrap_server	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^        fn wrap_server(&self, stream: HttpStream) -> ::Result<Self::Stream> {$/;"	f
wrap_server	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^        fn wrap_server(&self, stream: HttpStream) -> ::Result<Stream> {$/;"	f
wrap_server	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^    fn wrap_server(&self, stream: HttpStream) -> ::Result<Self::Stream> {$/;"	f
wrap_server	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^    fn wrap_server(&self, stream: HttpStream) -> ::Result<Self::Stream>;$/;"	f
wrap_server	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^    fn wrap_server(&self, stream: T) -> ::Result<Self::Stream>;$/;"	f
write	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/benches/client.rs	/^    fn write(&mut self, msg: &[u8]) -> io::Result<usize> {$/;"	f
write	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/pool.rs	/^    fn write(&mut self, buf: &[u8]) -> io::Result<usize> {$/;"	f
write	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/proxy.rs	/^        fn write(&mut self, _buf: &[u8]) -> io::Result<usize> {$/;"	f
write	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/proxy.rs	/^    fn write(&mut self, buf: &[u8]) -> io::Result<usize> {$/;"	f
write	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/client/request.rs	/^    fn write(&mut self, msg: &[u8]) -> io::Result<usize> {$/;"	f
write	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h1.rs	/^    fn write(&mut self, buf: &[u8]) -> io::Result<usize> {$/;"	f
write	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h1.rs	/^    fn write(&mut self, msg: &[u8]) -> io::Result<usize> {$/;"	f
write	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h2.rs	/^    fn write(&mut self, buf: &[u8]) -> io::Result<usize> {$/;"	f
write	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/mock.rs	/^    fn write(&mut self, msg: &[u8]) -> io::Result<usize> {$/;"	f
write	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^        fn write(&mut self, buf: &[u8]) -> io::Result<usize> {$/;"	f
write	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^    fn write(&mut self, msg: &[u8]) -> io::Result<usize> {$/;"	f
write	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/server/response.rs	/^    fn write(&mut self, msg: &[u8]) -> io::Result<usize> {$/;"	f
write	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/filter.rs	/^    fn write<'a>(&'a self, context: FilterContext, content: Option<Data<'a>>) -> ResponseAction;$/;"	f
write	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/response.rs	/^    fn write(&mut self, content: &[u8]) -> io::Result<usize> {$/;"	f
write_all	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^        fn write_all(&mut self, buf: &[u8]) -> io::Result<()> {$/;"	f
write_all	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/rustful-0.9.0/src/response.rs	/^    fn write_all(&mut self, content: &[u8]) -> io::Result<()> {$/;"	f
write_fmt	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/net.rs	/^        fn write_fmt(&mut self, fmt: fmt::Arguments) -> io::Result<()> {$/;"	f
write_head	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/server/response.rs	/^    fn write_head(&mut self) -> io::Result<Body> {$/;"	f
writer_mut	/home/kibbles/.cargo/registry/src/github.com-88ac128001ac3a9a/hyper-0.9.10/src/http/h1.rs	/^    fn writer_mut(&mut self) -> Option<&mut HttpWriter<BufWriter<Box<NetworkStream + Send>>>> {$/;"	f
